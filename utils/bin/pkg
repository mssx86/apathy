#!/mss/bin/sh
. /mss/files/funcs

   host="$(awk '{print $2}' /sys/devices/virtual/dmi/id/product_family)"
repodir="/mss/repo"
localdb="/mss/files/packages.txt"

case "${host}" in
 X220) repodb="${repodir}/pkg-management/packages-x220.txt" ;;
 T61)  repodb="${repodir}/pkg-management/packages-t61.txt"  ;;
 *)    aprint_fail "${host} not supported"; exit 1          ;;
esac

if   [ ! -f "${localdb}" ]; then
 aprint_fail "(local) database file does not exist, exiting."
 exit 1
elif [ ! -f "${repodb}"  ]; then
 aprint_fail "(repo)  database file for ${host} does not exist, exiting."
 exit 1
fi

info(){
 if [ -z "${1}" ]
  then
   aprint_fail "specify the package name in \$1."
   exit 1
  else
   awk '/'$1'/ { gsub(/^b/,"busybox:   ");   \
                 gsub(/^i/,"installed: ");   \
                 gsub(/^o/,"ondemand:  ");   \
                 gsub(/^r/,"removed:   ");   \
                 print $1,"("$2")\t",$4,$5}' \
                 "${localdb}"
 fi
}

pver(){
      tls=$(openssl version | awk '{print tolower($1),$2}')
     libc=$(ldd 2>&1 \
            | awk 'FNR == 1 {a=$1; b=$2; d=$3}; \
                   FNR == 2 {c=$2}              \
                   END{print a,b,c,d}')
     trpl=$(gcc -dumpmachine)
      cca=$(gcc   --version | awk 'FNR == 1 {print}')
      ccb=$(clang --version | awk 'FNR == 1 {print $1,$2,$4}')

 cargover="$(rustc -V | awk '{print $2}')"
 rustcver="$(cargo -V | awk '{print $2}')"

 [ "${cargover}" = "${rustcver}" ] \
  && roost="${rustcver}" || roost="${rustcver}/${cargover}"

 aprint_nc
  lsdetail "tls " "${tls}  "
  lsdetail "libc" "${libc} "
  lsdetail "cca " "${cca}  "
  lsdetail "ccb " "${ccb}  "
  lsdetail "rust" "${roost}"
  lsdetail "trpl" "${trpl} "
 aprint_nc
}

stats(){
 gitdf_pre=$(diff -u "${localdb}" "${repodb}"                  \
             | awk '/^---/   {print "- local"" --->",$3"\t"$4};  \
                    /^\+\+\+/ {print "+ git"" ----->",$3"\t"$4}; \
                    /^\+[a-z,0-9]/;                              \
                    /^-[a-z,0-9]/')

 [ -z "${gitdf_pre}" ] \
  && gitdf="none" || gitdf="\n\n${gitdf_pre}"

 [ -z "$(cd /mss/repo && git status -s)" ] \
  && gitstat="clean" || gitstat="dirty"
 
    partsize="$(df / | awk 'NR==2 {print $3/1024"/"$2/1024"M"}')"
      c_inst="$(grep ^i "${localdb}" | wc -l)"
      c_rmvd="$(grep ^r "${localdb}" | wc -l)"
      c_ondm="$(grep ^o "${localdb}" | wc -l)"

 aprint_nc
  aprint "${cb_red}rootfs size    ${cb_blu}:${c_res} ${partsize}"
  aprint "${cb_red}package count  ${cb_blu}:${c_res} ${c_inst} (+${c_ondm})"
  aprint "${cb_red}repo status    ${cb_blu}:${c_res} ${gitstat}"
  aprint "${cb_red}local/git diff ${cb_blu}:${c_res} ${gitdf}"
 aprint_nc
}

sync(){
 aprint_nc
  aprint_ret "(repo -> local) syncing packages database for ${host}."
   cp "${repodb}" "${localdb}"
  evalret
 aprint_nc
}

print_help(){
 aprint_usage "{info|pver|stats|sync}."
 exit 1
}

case "$1" in
    info) info "$2"       ;;
    pver) pver            ;;
   stats) stats           ;;
    sync) sync            ;;
       *) print_help      ;;
esac
