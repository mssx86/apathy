#!/mss/bin/sh
. /mss/files/funcs

## programs
# > gcc
prog_gcc(){
 export        CC="$(which ${CHOST}-gcc)"
 export       CXX="$(which ${CHOST}-g++)"
 export        LD="$(which ld.bfd)"
 export        AR="$(which ${CHOST}-gcc-ar)"
 export        AS="$(which as)"
 export        NM="$(which ${CHOST}-gcc-nm)"
 export     STRIP="$(which strip)"
 export    RANLIB="$(which ${CHOST}-gcc-ranlib)"
 export   OBJCOPY="$(which objcopy)"
 export   OBJDUMP="$(which objdump)"
 export   OBJSIZE="$(which size)"
 export   READELF="$(which readelf)"
 export ADDR2LINE="$(which addr2line)"
}

# > clang
prog_clang(){
 export        CC="$(which clang)"
 export       CXX="$(which clang++)"
 export        LD="$(which ld.lld)"
 export        AR="$(which llvm-ar)"
 export        AS="$(which llvm-as)"
 export        NM="$(which llvm-nm)"
 export     STRIP="$(which llvm-strip)"
 export    RANLIB="$(which llvm-ranlib)"
 export   OBJCOPY="$(which llvm-objcopy)"
 export   OBJDUMP="$(which llvm-objdump)"
 export   OBJSIZE="$(which llvm-size)"
 export   READELF="$(which llvm-readelf)"
 export ADDR2LINE="$(which llvm-addr2line)"
}

## flags
# > base
           cflags_base="-w -pipe -O2 -mtune=native -march=native -fcommon"
          ldflags_base="-Wl,--as-needed,--sort-common,-z,relro,-z,now,--gc-sections,-O2"

# > gcc
       gcc_cflags_base="${cflags_base}"  
      gcc_ldflags_base="${ldflags_base}"

        gcc_lto_cflags="${gcc_cflags_base} -flto -fuse-linker-plugin -fno-fat-lto-objects"
       gcc_lto_ldflags="${gcc_ldflags_base}"

# > clang
     clang_cflags_base="${cflags_base} -fuse-ld=lld -stdlib=libc++ -rtlib=compiler-rt -unwindlib=libunwind"
    clang_ldflags_base="${ldflags_base} -Wl,--icf=all"

 clang_cflags_lto_full="${clang_cflags_base} -flto=full -flto-jobs=$(($(nproc) + 1))"
clang_ldflags_lto_full="${clang_ldflags_base} -Wl,--lto-O3"

 clang_cflags_lto_thin="${clang_cflags_base} -flto=thin -flto-jobs=$(($(nproc) + 1))"
clang_ldflags_lto_thin="${clang_ldflags_base} -Wl,--lto-O3,--thinlto-jobs=$(($(nproc) + 1)),--thinlto-cache-dir=/mss/work/thinltocache"


## profiles
# gcc - binutils - no lto
bwprof_one(){
 profname="gcc - binutils - no lto"
 prog_gcc

 export   CFLAGS="${gcc_cflags_base}"
 export CXXFLAGS="\${CFLAGS}"
 export  LDFLAGS="\${CFLAGS} ${gcc_ldflags_base}"
}

# gcc - binutils - w/ lto
bwprof_two(){
 profname="gcc - binutils - w/ lto"
 prog_gcc

 export   CFLAGS="${gcc_lto_cflags}"
 export CXXFLAGS="\${CFLAGS}"
 export  LDFLAGS="\${CFLAGS} ${gcc_lto_ldflags}"
}

# clang - llvm - no lto
bwprof_three(){
 profname="clang - llvm - no lto"
 prog_clang

 export   CFLAGS="${clang_cflags_base}"
 export CXXFLAGS="\${CFLAGS}"
 export  LDFLAGS="\${CFLAGS} ${clang_ldflags_base}"
}

# clang - llvm - full lto
bwprof_four(){
 profname="clang - llvm - full lto"
 prog_clang

 export   CFLAGS="${clang_cflags_lto_full}"
 export CXXFLAGS="\${CFLAGS}"
 export  LDFLAGS="\${CFLAGS} ${clang_ldflags_lto_full}"
}

# clang - llvm - thin lto
bwprof_five(){
 profname="clang - llvm - thin lto"
 prog_clang

 export   CFLAGS="${clang_cflags_lto_thin}"
 export CXXFLAGS="\${CFLAGS}"
 export  LDFLAGS="\${CFLAGS} ${clang_ldflags_lto_thin}"
}

printvarthingies(){
 aprint "${profname}"

 aprint_nc
 printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n" \
  "export        CC=\"${CC}\""       \
  "export       CXX=\"${CXX}\""      \
  "export        LD=\"${LD}\""       \
  "export        AR=\"${AR}\""       \
  "export        AS=\"${AS}\""       \
  "export        NM=\"${NM}\""       \
  "export     STRIP=\"${STRIP}\""    \
  "export    RANLIB=\"${RANLIB}\""   \
  "export   OBJCOPY=\"${OBJCOPY}\""  \
  "export   OBJDUMP=\"${OBJDUMP}\""  \
  "export   OBJSIZE=\"${OBJSIZE}\""  \
  "export   READELF=\"${READELF}\""  \
  "export ADDR2LINE=\"${ADDR2LINE}\""
 aprint_nc
 printf "%s\n%s\n%s\n" \
  "export    CFLAGS=\"${CFLAGS}\""   \
  "export  CXXFLAGS=\"${CXXFLAGS}\"" \
  "export   LDFLAGS=\"${LDFLAGS}\""
 aprint_nc
}

case "$1" in
 1) bwprof_one  ; printvarthingies ;;
 2) bwprof_two  ; printvarthingies ;;
 3) bwprof_three; printvarthingies ;;
 4) bwprof_four ; printvarthingies ;;
 5) bwprof_five ; printvarthingies ;;
 env)
  profname="current environment variables are:"
  printvarthingies
 ;;
 *)
  aprint_fail "${cb_red}1-5${c_res}, or ${cb_red}env${c_res} exiting."
  exit 1
 ;;
esac
