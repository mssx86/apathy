#!/bin/sh
# alsa init script for sysvinit
# apathy 1.2 - mssx86 (mss@waifu.club)

. /lib/lsb/init-functions

print_error_msg(){
 log_failure_msg
 log_failure_msg "\nfailure:\n you're seeing this because ${i} exited with ${error_value}."
 log_info_msg "press enter to procceed."
 wait_for_user
}

check_script_status(){
 # $i is set when called
 if [ ! -f ${i} ]; then log_warning_msg "${i} is not a valid symlink.";		script_stat="1"; fi
 if [ ! -x ${i} ]; then log_warning_msg "${i} is not executable, skipping.";	script_stat="1"; fi
}

run(){
 if [ -z $interactive ]; then ${1} ${2}; return $?; fi

 while true
  do
   printf "apathy - run ${1} ${2} (yY/nN/cC)?: "
   read runit

   case ${runit} in
    c | C) interactive=""; ${i} ${2}; ret=${?} break	;;
    n | N) return 0					;;
    y | Y) ${i} ${2}; ret=${?}; break			;;
   esac
  done

 return $ret
}

# read any local settings, override if exists
[ -r /etc/sysconfig/rc.site ] && . /etc/sysconfig/rc.site

# shut dmesg off for the love of god
dmesg --console-off

# these 3 signals won't cause the script to exit
trap "" INT QUIT TSTP

[ "${1}" != "" ] && runlevel=${1}
if [ "${runlevel}" = "" ]; then printf "usage: ${0} <runlevel>.\n" >&2; exit 1; fi

previous=${PREVLEVEL}
[ "${previous}" = "" ] && previous=N

if [ ! -d /etc/rc.d/rc${runlevel}.d ]; then
 log_info_msg "apathy - /etc/rc.d/rc${runlevel}.d does not exist.\n"
 exit 1
fi

if [ "$runlevel" = "S" ]
 then
  [ -r /etc/sysconfig/console ] && . /etc/sysconfig/console
  /usr/bin/clear
  printf "\n${sbefore}${c_blue}  __,  ,_   __,  -/- /_\n"
  printf "${sbefore} (_/(__/_)_(_/(__/__/ (__(_/_\n"
  printf "${sbefore}      /                  _/_\n"
  printf "${sbefore}     /                  (/${c_reset}\n"
  printf "\n${sbefore}welcome to ${c_blue}apathy gnu/linux ${c_green}1.2${c_reset}.\n"
  printf "${sbefore}running on kernel ${c_green}$(/bin/uname -r)${c_reset}.\n\n"


  printf "\n${sbefore}${c_green}$(date '+%a %d %I:%M:%S%P')${c_reset} - ${c_green}$(/sbin/init --version)${c_reset}"
  printf "${cur_zero}${col}\n"
fi

# attempt to stop all services started by the previous runlevel, and killed in this runlevel
if [ "${previous}" != "N" ]
 then
  for i in $(ls -v /etc/rc.d/rc${runlevel}.d/K* 2> /dev/null)
   do
    check_script_status
    if [ "${script_stat}" = "1" ]; then script_stat="0"; continue; fi

    suffix=${i#/etc/rc.d/rc$runlevel.d/K[0-9][0-9]}
    prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix
    sysinit_start=/etc/rc.d/rcS.d/S[0-9][0-9]$suffix

      if [ ! "${runlevel}" = "0" ] && [ ! "${runlevel}" = "6" ]
       then
        if [ ! -f ${prev_start} -a  ! -f ${sysinit_start} ]
	 then
          MSG="\nwarning:\n${i} can't be executed because it was not "
          MSG="${MSG}not started in the previous runlevel (${previous})."
          log_warning_msg "$MSG"
          continue
        fi
      fi

      run ${i} stop
      error_value=${?}

      if [ ! "${error_value}" = "0" ]; then print_error_msg; fi
   done
fi

if [ "${previous}" = "N" ]; then export IN_BOOT=1; fi

# start all functions in this runlevel
for i in $( ls -v /etc/rc.d/rc${runlevel}.d/S* 2> /dev/null)
 do
   if [ ! "${previous}" = "N" ]
    then
     suffix=${i#/etc/rc.d/rc$runlevel.d/S[0-9][0-9]}
     stop=/etc/rc.d/rc$runlevel.d/K[0-9][0-9]$suffix
     prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix

     [ -f ${prev_start} ] && [ ! -f ${stop} ] && continue
   fi

   check_script_status

   if [ "${script_stat}" = "1" ]; then script_stat="0"; continue; fi

   case ${runlevel} in
    0|6) run ${i} stop	;;
      *) run ${i} start	;;
   esac

   error_value=${?}

   if [ ! "${error_value}" = "0" ]; then print_error_msg; fi
 done

# copy the boot log on initial boot only
if [ "${previous}" = "N" ] && [ ! "${runlevel}" = "S" ]
 then
  cat $bootlogdir >> /var/log/boot.log
  
  # mark the end of boot
  printf ".--------.\n" >> /var/log/boot.log

  # remove the temporary file
  rm -f $bootlogdir 2> /dev/null
fi
