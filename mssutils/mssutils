#!/bin/env bash
## functions ###
# update
update (){
 if [ "$(id -u)" -ne 0 ]; then
  echo ' ! this script must be run by root.'
 exit 1
 fi
  echo " * running /usr/sbin/make-ca -g." &&
   /usr/sbin/make-ca -g > /dev/null 2>&1 && echo " ** done" &&
  echo " * running /usr/sbin/update-pciids." &&
   /usr/sbin/update-pciids > /dev/null 2>&1 && echo " ** done" &&
  echo " * running /usr/sbin/ntpd -q -g." &&
   /usr/sbin/ntpd -q -g > /dev/null 2>&1 && echo " ** done" &&
  echo " * running the usbutils thingy" &&
   /usr/bin/wget http://www.linux-usb.org/usb.ids -O /usr/share/hwdata/usb.ids \
   > /dev/null 2>&1 && echo " * done"
  echo " ** system is up to date."
}

# fetch
fetch (){
 cat /mss/bin/ascii

 del_col (){
  sed -r 's/\s+\S+$//'
 }

 dist=$(grep "ID" "/etc/lsb-release" | sed 's/DISTRIB_ID\=//g' | sed 's/\"//g')
 cpu=$(lscpu | grep "Model name" | sed 's/Model name:          //g' \
	| sed 's/CPU //g' | del_col | del_col | cut -f1 -d" " --complement)
 freq_old=$(lscpu | grep "CPU MHz:" | sed 's/CPU MHz:             //g' | sed 's/[.].*$//')
 freq=$(echo ${freq_old} / 1000 | bc -l | cut -c-5)
 kern=$(uname -r)
 upt=$(uptime --pretty | sed 's/up //' | sed 's/\ years\?,/y/' \
	| sed 's/\ days\?,/d/' | sed 's/\ hours\?,\?/h/' | sed 's/\ minutes\?/m/')
 tot=$(free -h | head -2 | tail -1 | awk '{print $2}' | sed 's/Gi//g')
 use=$(free -h | head -2 | tail -1 | awk '{print $3}' | sed 's/Gi//g')

# echo " * dist: ${dist}" && echo " * kern: ${kern}" &&
# echo " * sh  : $SHELL"  && echo " * upt : ${upt}"  &&
# echo " * cpu : ${cpu} @ ${freq}GHz" && echo " * mem : ${use}/${tot}G"
# echo

 echo -e " * dist: ${dist} \n * kern: ${kern} \n * sh  : $SHELL \n \
* upt : ${upt} \n * cpu : ${cpu} @ ${freq}GHz \n * mem : ${use}/${tot}G \n"
}

# ch
ch (){
 if [ "$(id -u)" -ne 0 ]; then
  echo ' ! this script must be run by root.'
 exit 1
 fi
 
 export GNT="/mnt/dev/gentoo"
 echo " * mounting and chrooting to: $GNT"
 mount -R	/dev	$GNT/dev	&&
 mount -R	/proc	$GNT/proc	&&
 mount -R	/sys	$GNT/sys	&&
 mount -R	/run	$GNT/run	&&
 chroot		$GNT	/bin/zsh	&&
 umount -lv	$GNT/{dev,proc,sys,run}
 echo " * exited from chroot and umounted dirs."
}

# kerninst
kerninst (){
 if [ "$(id -u)" -ne 0 ]; then
  echo ' ! this script must be run by root.'
 exit 1
 fi

 cp -iv arch/x86/boot/bzImage    /boot/vmlinuz
 cp -iv System.map               /boot/System.map
 cp -iv .config                  /boot/config
}

# pkgcount
pkgcount (){
 count=$(wc -l /mss/raw-packages.txt | awk '{print $1}')
 repo="/mnt/mss/stuff/techy-bits/git-repositories/mssLinux"
 gitdf_pre=$(diff /mss/raw-packages.txt $repo/lists/raw-packages.txt)
 gitstat_pre=$(cd $repo && git status -s)

 if [ -z "$gitdf_pre" ]
 then
   gitdf="there's no difference."
 else
   gitdf=$(echo -e "\n\n$gitdf_pre")
 fi

 if [ -z "$gitstat_pre" ]
 then
   gitstat="clean."
 else
   gitstat="uncommited changes are listed below.\n\n$gitstat_pre"
 fi

 echo -e " * local package count: $count\n * local and git diff : $gitdf\n * git repo status    : $gitstat"
}
### end functions ###


### flags ###
while test $# -gt 0; do
 case "$1" in
  -h|--help)
   shift
   echo " -h or --help		print this dialogue."
   echo " -f or fetch		run mssfetch."
   echo " -u or update		run update. "
   echo " -c or ch		mount and chroot to $GNT."
   echo " -k or kerninst		install compiled kernel."
   shift
   ;;
  -f|fetch)	shift; fetch;				shift;;
  -u|update)	shift; update;				shift;;
  -c|ch)	shift; ch;				shift;;
  -k|kerninst)	shift; kerninst;			shift;;
  -p|pkgcount)  shift; pkgcount;			shift;;
  *)		echo "$1 is not a recognized flag!";	break;;
 esac
done
### end flags ###
