#!/mss/bin/sh
## a >> cfg
tmpdir="/tmp/lemonbar"
bwadapter="wlan0"

fr='%{F-}' f1='%{F#101010}' f2='%{F#747474}' f3='%{F#ababab}' f4='%{F#464646}' f5='%{F#e62063}'
br='%{B-}' b1='%{B#101010}' b2='%{B#464646}' b3='%{B#252525}'

sep=" ${f4}|${fr} "

## b >> action
# b1 >> funcs
alsa_capture(){
 cap_data=$(amixer -D default get Capture | awk 'NR==6 {gsub("\\[",""); gsub("\\]",""); print}')
 [ "$(echo $cap_data | awk '{print $7}')" = "off" ]        \
  && alsa_capture="${f5}muted${fr}"                        \
  || alsa_capture="$(echo ${cap_data} | awk '{print $6}')"

alsa_capture="%{A3:amixer -q -D default sset Capture toggle > /dev/null:}\
%{A4:amixer -q -D default sset Capture 3dB+ unmute > /dev/null:}\
%{A5:amixer -q -D default sset Capture 3dB- unmute > /dev/null:}\
${alsa_capture}%{A}%{A}%{A}"
}

#alsa_master(){
# mas_data=$(amixer -D default get Master | awk 'NR==5 {gsub("\\[",""); gsub("\\]",""); print}')
# [ "$(echo $mas_data | awk '{print $6}')" = "off" ]       \
#  && alsa_master="muted"                                  \
#  || alsa_master="$(echo ${mas_data} | awk '{print $4}')"
#
#  alsa_master="%{A3:amixer -q -D default sset Master toggle > /dev/null:}\
#%{A4:amixer -q -D default sset Master 3dB+ unmute > /dev/null:}\
#%{A5:amixer -q -D default sset Master 3dB- unmute > /dev/null:}\
#${alsa_master}%{A}%{A}%{A}"
#}

alsa_head(){
 head_data=$(amixer -D default get Headphone | awk 'NR==6 {gsub("\\[",""); gsub("\\]",""); print}')
 [ "$(echo $head_data | awk '{print $7}')" = "off" ]     \
  && alsa_head="${f5}muted${fr}"                         \
  || alsa_head="$(echo ${head_data} | awk '{print $5}')"

  alsa_head="%{A3:amixer -q -D default sset Headphone toggle > /dev/null:}\
%{A4:amixer -q -D default sset Headphone 3dB+ unmute > /dev/null:}\
%{A5:amixer -q -D default sset Headphone 3dB- unmute > /dev/null:}\
${alsa_head}%{A}%{A}%{A}"
}

alsa_speak(){
 speak_data=$(amixer -D default get Speaker | awk 'NR==6 {gsub("\\[",""); gsub("\\]",""); print}')
 [ "$(echo $speak_data | awk '{print $7}')" = "off" ]      \
  && alsa_speak="${f5}muted${fr}"                          \
  || alsa_speak="$(echo ${speak_data} | awk '{print $5}')"

  alsa_speak="%{A3:amixer -q -D default sset Speaker toggle > /dev/null:}\
%{A4:amixer -q -D default sset Speaker 3dB+ unmute > /dev/null:}\
%{A5:amixer -q -D default sset Speaker 3dB- unmute > /dev/null:}\
${alsa_speak}%{A}%{A}%{A}"
}

bw1(){
 [ -z "$(pidof openvpn)" ] && memepn=off || memepn=on

 read rx1 < "/sys/class/net/${bwadapter}/statistics/rx_bytes"
 read tx1 < "/sys/class/net/${bwadapter}/statistics/tx_bytes"
}

bw2(){
 read rx2 < "/sys/class/net/${bwadapter}/statistics/rx_bytes"
 read tx2 < "/sys/class/net/${bwadapter}/statistics/tx_bytes"

 rx_kib=$(echo "(${rx2} - ${rx1}) / 1024" | bc)
 tx_kib=$(echo "(${tx2} - ${tx1}) / 1024" | bc)

 total_rx=$(echo "$rx2 / 1048576" | bc)
 total_tx=$(echo "$tx2 / 1048576" | bc)

 bw="${f2}${rx_kib}${f3}(${total_rx})${f2}rx ${f2}${tx_kib}${f3}($total_tx)${f2}tx ${f5}${memepn}${fr}"
}

cpustat1(){
 s1_data=$(grep cpu /proc/stat | head -1)
 s1_total=$(($(echo $s1_data | awk '{gsub(" ","+"); gsub("cpu","0"); print}')))
 s1_col4=$(echo $s1_data | awk '{print $5}')
}

cpustat2(){
 s2_data=$(grep cpu /proc/stat | head -1)
 s2_total=$(($(echo $s2_data | awk '{gsub(" ","+"); gsub("cpu","0"); print}')))
 s2_col4=$(echo $s2_data | awk '{print $5}')

 used=$(((${s2_total} - ${s1_total}) - (${s2_col4} - ${s1_col4})))
 thrd=$(awk '{print $4}' /proc/loadavg)
 load=$((100 * ${used} / (${s2_total} - ${s1_total})))
#temp0=$(sensors coretemp-isa-0000 | awk '/Core 0/ {gsub("+",""); gsub("°C",""); print $3}')
#temp1=$(sensors coretemp-isa-0000 | awk '/Core 1/ {gsub("+",""); gsub("°C",""); print $3}')
 temp0=$(cut -b1-2 /sys/class/hwmon/hwmon1/temp2_input)
 temp1=$(cut -b1-2 /sys/class/hwmon/hwmon1/temp3_input)

 cpustat="${f2}$load${f3}% ${f2}${thrd} ${f2}$temp0${f3}/${f2}$temp1${f3}c${fr}"
}

mem(){
 mem_p=$(free --mebi | awk 'NR==2 {print $3}')
 mem="${f2}${mem_p}${f3}m${fr}"
}

mpdstat(){
 if [ ! -z $(pidof mpd) ]; then
   mpc_status="$(mpc status)"

   case "$(echo "${mpc_status}" | head -1)" in
    *volume:*) state="mpd is idle" ;;
    *)
     artist_pre=$(mpc current -f "[%artist%]") song_pre=$(mpc current -f "[%title%]")

     if [ -z "${artist_pre}" ] || [ -z "${song_pre}" ]
      then
       song=$(mpc --format "[%file%]" current | sed 's/unorganized\///;s/.mp3//;s/.flac//;s/.wav//' \
        | awk -v len=35 '{ if (length($0) > len) print substr($0, 1, len-3) "..."; else print; }')
      else
       artist=$(echo "${artist_pre}" \
        | awk -v len=20 '{ if (length($0) > len) print substr($0, 1, len-3) "..."; else print; }')
       art=$(echo "${song_pre}" \
        | awk -v len=25 '{ if (length($0) > len) print substr($0, 1, len-3) "..."; else print; }')
       song="${artist} - ${art}"
     fi

     main="$(echo "${mpc_status}" | awk 'NR==2 {print $3}' | sed 's/\// /g;s/:/ /g')"
     curr_mins="$(echo "${main}" | awk '{print $1}')"
     curr_secs="$(echo "${main}" | awk '{print $2}')"
     curr=$(echo "$curr_secs + ($curr_mins * 60)" | bc -l)
     total_mins="$(echo "${main}" | awk '{print $3}')"
     total_secs="$(echo "${main}" | awk '{print $4}')"
     total=$(echo "$total_secs + ($total_mins * 60)" | bc -l)
     dur_pre="$(($total - $curr))"

     [ "$dur_pre" -gt "3599" ] \
      && dur="$(printf '%02d:%02d:%02d\n' $(($dur_pre/3600)) $(($dur_pre%3600/60)) $(($dur_pre%60)))" \
      || dur="$(printf '%02d:%02d\n' $(($dur_pre%3600/60)) $(($dur_pre%60)))"

     [ "$(echo "${mpc_status}" | awk 'NR==2 {print $1}')" = "[paused]" ] \
      && state="${f2}[paused]${fr} ${f3}${song}${fr}" \
      || state="${f3}${song}${fr} ${f2}${dur}${fr}"
    ;;
   esac
  else state="${f5}mpd is not running${fr}"
 fi

 mpd="%{A:mpc next:}%{A2:mpc toggle:}%{A3:mpc prev:}%{A4:mpc volume +10:}\
%{A5:mpc volume -10:}${state}%{A5}%{A4}%{A3}%{A2}%{A}"
}

upt(){
 utime_b=$(cat /proc/uptime | awk '{print $1}')
 echo "$(printf "%dd %dh %dm\n"                      \
           "$(echo "${utime_b}/86400"        | bc)"  \
           "$(echo "(${utime_b}%86400)/3600" | bc)"  \
           "$(echo "(${utime_b}%3600)/60"    | bc)")"
}

weat(){
 stats_now=$(curl -s -H "Origin: https://mgm.gov.tr" --request GET \
  "https://servis.mgm.gov.tr/web/sondurumlar?merkezid=97101" | jq '.[] |
  .sicaklik, .nem, .ruzgarHiz, .yagis00Now, .hadiseKodu')

 [ -z "${stats_now}" ]                                    \
  && echo "${f5}no data${fr}"                             \
  || echo "$(echo $stats_now | tr '[:upper:]' '[:lower:]' \
     | awk '{gsub("\"",""); print $1"c",$2"%",substr($3, 1, 4)"km/h",$4"mm",$5}')"
}

ifacestat(){
 read eth0stat  < /sys/class/net/eth0/operstate
 read wlan0stat < /sys/class/net/wlan0/operstate

 [ "${wlan0stat}" = "up" ] \
  && \
   noise="$(awk '/wlan0/ {gsub("\\.",""); print $4}' /proc/net/wireless)" \
   wlan0stat="${noise}${f2}dB" \
  || \
   wlan0stat="dn"

 [ "${eth0stat}" = "down" ] && eth0stat="dn"

 ifacestat="${f3}eth0${f2}:${f5}${eth0stat} ${f3}wlan0${f2}:${f5}${wlan0stat}${fr}"
}

# b2 >> start timers
rm -rf "${tmpdir}"; mkdir "${tmpdir}"
while true; do upt  > "${tmpdir}"/upt.tmp;  sleep 60;  done &
while true; do weat > "${tmpdir}"/weat.tmp; sleep 300; done &

# b3 >> finally, start and print everything
while true; do
 time="$(date '+%a %d %I:%M:%S%P')"
 active_ws="${f2}[${fr}$(echo $(wmctrl -l | awk '{print $2}' | sort -u))${f2}]${fr}"
 mem=$(free --mebi | awk 'NR==2 {print $3"mib"}')

 read weat < "${tmpdir}"/weat.tmp
 read upt  < "${tmpdir}"/upt.tmp

#alsa_master
 alsa_capture
 alsa_head
 alsa_speak
 bw1
 ifacestat
 cpustat1
 mpdstat
 mem

 echo "\
%{l} \
${active_ws}\
%{r}\
${bw}${sep}\
${cpustat} \
${mem}${sep}\
${mpd}${sep}\
${f2}${alsa_head}${fr} \
${f2}${alsa_speak}${fr} \
${f2}${alsa_capture}${fr}${sep}\
${f2}${weat}${fr}${sep}\
${ifacestat}${sep}\
${f3}${time}${fr} \
${f5}${upt} ${fr}"
 sleep 1
 bw2
 cpustat2
done
