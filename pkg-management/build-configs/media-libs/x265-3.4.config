# 1
export        CC="/opt/llvm-10.0.1/bin/clang"
export       CXX="/opt/llvm-10.0.1/bin/clang++"
export        LD="/opt/llvm-10.0.1/bin/ld.lld"

export        AR="/opt/llvm-10.0.1/bin/llvm-ar"
export        AS="/opt/llvm-10.0.1/bin/llvm-as"
export        NM="/opt/llvm-10.0.1/bin/llvm-nm"
export     STRIP="/opt/llvm-10.0.1/bin/llvm-strip"
export    RANLIB="/opt/llvm-10.0.1/bin/llvm-ranlib"
export   OBJCOPY="/opt/llvm-10.0.1/bin/llvm-objcopy"
export   OBJDUMP="/opt/llvm-10.0.1/bin/llvm-objdump"
export   OBJSIZE="/opt/llvm-10.0.1/bin/llvm-size"
export   READELF="/opt/llvm-10.0.1/bin/llvm-readelf"
export ADDR2LINE="/opt/llvm-10.0.1/bin/llvm-addr2line"

export    CFLAGS="-w -Ofast -mtune=native -march=native -fstack-protector-strong -fuse-ld=lld -mllvm -polly -flto=thin -flto-jobs=2"
export  CXXFLAGS="${CFLAGS} -fpermissive"
export   LDFLAGS="${CFLAGS} -Wl,--as-needed -Wl,--gc-sections -Wl,-O2 -Wl,-lto-O3 -Wl,--icf=all -Wl,--thinlto-jobs=2 -Wl,-z,stack-size=2097152 -Wl,--thinlto-cache-dir=/mss/work/thinltocache"

# 2
mkdir -v builderoo
cd       builderoo

# 3
cmake -G Ninja -Wno-dev \
 -DCMAKE_INSTALL_PREFIX=/usr                      \
 -DCMAKE_BUILD_TYPE=Release                       \
 -DCMAKE_C_FLAGS_RELEASE_INIT="$CFLAGS"           \
 -DCMAKE_CXX_FLAGS_RELEASE_INIT="$CXXFLAGS"       \
 -DCMAKE_EXE_LINKER_FLAGS_RELEASE_INIT="$LDFLAGS" \
 -DCMAKE_C_COMPILER_TARGET="$CHOST"               \
 -DCMAKE_CXX_COMPILER_TARGET="$CHOST"             \
 -DCMAKE_AR="$AR"                                 \
 -DCMAKE_NM="$NM"                                 \
 -DCMAKE_STRIP="$STRIP"                           \
 -DCMAKE_RANLIB="$RANLIB"                         \
 -DCMAKE_LINKER="$LD"                             \
 -DCMAKE_OBJCOPY="$OBJCOPY"                       \
 -DCMAKE_OBJDUMP="$OBJDUMP"                       \
 -DCMAKE_READELF="$READELF"                       \
 -DCMAKE_ADDR2LINE="$ADDR2LINE"                   \
 -DCMAKE_C_COMPILER="$CC"                         \
 -DCMAKE_CXX_COMPILER="$CXX"                      \
\
 ../source
