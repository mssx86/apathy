# 1
export        CC="/opt/llvm-10.0.1/bin/clang"
export       CXX="/opt/llvm-10.0.1/bin/clang++"
export        LD="/opt/llvm-10.0.1/bin/ld.lld"

export        AR="/opt/llvm-10.0.1/bin/llvm-ar"
export        AS="/opt/llvm-10.0.1/bin/llvm-as"
export        NM="/opt/llvm-10.0.1/bin/llvm-nm"
export     STRIP="/opt/llvm-10.0.1/bin/llvm-strip"
export    RANLIB="/opt/llvm-10.0.1/bin/llvm-ranlib"
export   OBJCOPY="/opt/llvm-10.0.1/bin/llvm-objcopy"
export   OBJDUMP="/opt/llvm-10.0.1/bin/llvm-objdump"
export   OBJSIZE="/opt/llvm-10.0.1/bin/llvm-size"
export   READELF="/opt/llvm-10.0.1/bin/llvm-readelf"
export ADDR2LINE="/opt/llvm-10.0.1/bin/llvm-addr2line"

export    CFLAGS="-w -Ofast -mtune=native -march=native -fstack-protector-strong -fuse-ld=lld -mllvm -polly -flto=thin -flto-jobs=2"
export  CXXFLAGS="${CFLAGS} -fpermissive"
export   LDFLAGS="${CFLAGS} -Wl,--as-needed -Wl,--gc-sections -Wl,-O2 -Wl,-lto-O3 -Wl,--icf=all -Wl,--thinlto-jobs=2 -Wl,-z,stack-size=2097152"

# 2
tar xf /mss/work/sauces/llvm-project-llvmorg-10.0.1.tar.gz
cd     llvm-project-llvmorg-10.0.1/

# 3
mkdir -v build
cd       build

# 4
cmake -Wno-dev -GNinja \
 -DLLVM_ENABLE_PROJECTS="polly;llvm;lld;clang"        \
\
 -DCMAKE_INSTALL_PREFIX="/opt/llvm-10.0.1"            \
 -DCMAKE_BUILD_TYPE=Release                           \
 -DCMAKE_C_FLAGS_RELEASE_INIT="$CFLAGS"               \
 -DCMAKE_CXX_FLAGS_RELEASE_INIT="$CXXFLAGS"           \
 -DCMAKE_EXE_LINKER_FLAGS_RELEASE_INIT="$LDFLAGS"     \
\
 -DLLVM_HOST_TRIPLE="$CHOST"                          \
 -DLLVM_TARGETS_TO_BUILD="host"                       \
 -DLLVM_DEFAULT_TARGET_TRIPLE="$CHOST"                \
 -DCMAKE_C_COMPILER_TARGET="$CHOST"                   \
 -DCMAKE_CXX_COMPILER_TARGET="$CHOST"                 \
\
 -DCMAKE_AR="$AR"                                     \
 -DCMAKE_NM="$NM"                                     \
 -DCMAKE_STRIP="$STRIP"                               \
 -DCMAKE_RANLIB="$RANLIB"                             \
 -DCMAKE_LINKER="$LD"                                 \
 -DCMAKE_OBJCOPY="$OBJCOPY"                           \
 -DCMAKE_OBJDUMP="$OBJDUMP"                           \
 -DCMAKE_READELF="$READELF"                           \
 -DCMAKE_ADDR2LINE="$ADDR2LINE"                       \
 -DCMAKE_C_COMPILER="$CC"                             \
 -DCMAKE_CXX_COMPILER="$CXX"                          \
\
 -DLLVM_ENABLE_EH=ON                                  \
 -DLLVM_ENABLE_FFI=ON                                 \
 -DLLVM_ENABLE_PIC=ON                                 \
 -DLLVM_ENABLE_RTTI=ON                                \
 -DLLVM_ENABLE_ZLIB=ON                                \
 -DLLVM_ENABLE_LIBXML2=OFF                            \
 -DLLVM_INSTALL_UTILS=ON                              \
 -DLLVM_LINK_LLVM_DYLIB=ON                            \
 -DLLVM_BUILD_LLVM_DYLIB=ON                           \
 -DLLVM_OPTIMIZED_TABLEGEN=ON                         \
\
 -DLLVM_ENABLE_LLD=ON                                 \
 -DLLVM_ENABLE_LTO="Thin"                             \
\
 -DCLANG_VENDOR="apathy"                              \
 -DCLANG_VENDOR_UTI="org.apathy"                      \
 -DCLANG_ENABLE_ARCMT=OFF                             \
 -DCLANG_ENABLE_STATIC_ANALYZER=OFF                   \
 -DCLANG_DEFAULT_LINKER="lld"                         \
 -DCLANG_LINK_CLANG_DYLIB=ON                          \
\
 -DCLANG_INCLUDE_DOCS=OFF                             \
 -DCLANG_INCLUDE_TESTS=OFF                            \
 -DLLVM_BUILD_DOCS=OFF                                \
 -DLLVM_BUILD_TESTS=OFF                               \
 -DLLVM_BUILD_EXAMPLES=OFF                            \
 -DLLVM_ENABLE_SPHINX=OFF                             \
 -DLLVM_ENABLE_DOXYGEN=OFF                            \
 -DLLVM_INCLUDE_DOCS=OFF                              \
 -DLLVM_INCLUDE_TESTS=OFF                             \
 -DLLVM_INCLUDE_EXAMPLES=OFF                          \
 -DLLVM_INCLUDE_GO_TESTS=OFF                          \
 -DLLVM_INCLUDE_BENCHMARKS=OFF                        \
 -DLLVM_TOOL_LLVM_GO_BUILD=OFF                        \
 -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=OFF                \
 -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=OFF        \
 -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD=OFF     \
 -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF   \
 -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF \
\
 ../llvm

# 5
/bin/busybox time samu -j2

# 6
instdir="$PWD/KEK"
DESTDIR="${instdir}" samu install

rm -rfv \
 "${instdir}"/opt/llvm-10.0.1/share/man \
 "${instdir}"/opt/llvm-10.0.1/share/clang/bash-autocomplete.sh

find "${instdir}"/opt/llvm-10.0.1/bin \
 -type f              -exec strip --strip-all      -v {} ';'

find "${instdir}"/opt/llvm-10.0.1/lib \
 -type f -name \*.a   -exec strip --strip-debug    -v {} ';'

find "${instdir}"/opt/llvm-10.0.1/lib \
 -type f -name \*.so* -exec strip --strip-unneeded -v {} ';'

# 7
doas -- cp -r  "${instdir}"/opt/llvm-10.0.1 /opt/
doas -- chown -R root:root /opt/llvm-10.0.1
