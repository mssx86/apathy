# 1
export        CC="/opt/llvm-10.0.1/bin/clang"
export       CXX="/opt/llvm-10.0.1/bin/clang++"
export        LD="/opt/llvm-10.0.1/bin/ld.lld"

export        AR="/opt/llvm-10.0.1/bin/llvm-ar"
export        AS="/opt/llvm-10.0.1/bin/llvm-as"
export        NM="/opt/llvm-10.0.1/bin/llvm-nm"
export     STRIP="/opt/llvm-10.0.1/bin/llvm-strip"
export    RANLIB="/opt/llvm-10.0.1/bin/llvm-ranlib"
export   OBJCOPY="/opt/llvm-10.0.1/bin/llvm-objcopy"
export   OBJDUMP="/opt/llvm-10.0.1/bin/llvm-objdump"
export   OBJSIZE="/opt/llvm-10.0.1/bin/llvm-size"
export   READELF="/opt/llvm-10.0.1/bin/llvm-readelf"
export ADDR2LINE="/opt/llvm-10.0.1/bin/llvm-addr2line"

export    CFLAGS="-w -march=native -mtune=native -O3 -fstack-protector-strong -fuse-ld=lld -mllvm -polly -flto=thin -flto-jobs=2"
export  CXXFLAGS="${CFLAGS}"
export   LDFLAGS="${CFLAGS} -Wl,-O1 -Wl,--as-needed -Wl,--gc-sections -Wl,--thinlto-jobs=2"

# 2
tar xf /mss/work/sauces/llvm-10.0.1.src.tar.xz
cd llvm-10.0.1.src

tar xf /mss/work/sauces/clang-10.0.1.src.tar.xz       -C tools
mv -v tools/clang-10.0.1.src/          tools/clang

tar xf /mss/work/sauces/lld-10.0.1.src.tar.xz         -C tools
mv -v tools/lld-10.0.1.src             tools/lld

tar xf /mss/work/sauces/polly-10.0.1.src.tar.xz       -C tools
mv -v tools/polly-10.0.1.src           tools/polly

# 3
mkdir -v build
cd       build

# 4
cmake \
 -DCMAKE_C_COMPILER="$CC"    \
 -DCMAKE_CXX_COMPILER="$CXX" \
 -DCMAKE_LINKER="$LD"        \
\
 -DCMAKE_ADDR2LINE="$ADDR2LINE" \
 -DCMAKE_AR="$AR"               \
 -DCMAKE_NM="$NM"               \
 -DCMAKE_OBJCOPY="$OBJCOPY"     \
 -DCMAKE_OBJDUMP="$OBJDUMP"     \
 -DCMAKE_RANLIB="$RANLIB"       \
 -DCMAKE_READELF="$READELF"     \
 -DCMAKE_STRIP="$STRIP"         \
\
 -DCMAKE_INSTALL_PREFIX=/opt/llvm-10.0.1          \
 -DCMAKE_BUILD_TYPE=Release                       \
 -DCMAKE_C_FLAGS_RELEASE_INIT="$CFLAGS"           \
 -DCMAKE_CXX_FLAGS_RELEASE_INIT="$CXXFLAGS"       \ 
 -DCMAKE_EXE_LINKER_FLAGS_RELEASE_INIT="$LDFLAGS" \
\
 -DLLVM_HOST_TRIPLE="$CHOST"            \
 -DLLVM_TARGETS_TO_BUILD="host"         \
 -DLLVM_DEFAULT_TARGET_TRIPLE="$CBUILD" \
\
 -DLLVM_BUILD_LLVM_DYLIB=ON \
 -DLLVM_LINK_LLVM_DYLIB=ON  \
 -DLLVM_ENABLE_RTTI=ON      \
 -DLLVM_ENABLE_FFI=ON       \
 -DLLVM_ENABLE_EH=ON        \
 -DLLVM_ENABLE_LLD=ON       \
 -DLLVM_ENABLE_LTO="Thin"   \ 
\
 -DCLANG_LINK_CLANG_DYLIB=ON     \
 -DCLANG_VENDOR=apathy           \
 -DCLANG_VENDOR_UTI="org.apathy" \
\
 -DLLVM_ENABLE_WARNINGS=OFF  \
 -DLLVM_BUILD_EXAMPLES=OFF   \
 -DLLVM_BUILD_DOCS=OFF       \
 -DLLVM_BUILD_TESTS=OFF      \
 -DLLVM_INCLUDE_EXAMPLES=OFF \
 -DLLVM_INCLUDE_TESTS=OFF    \
 -DLLVM_ENABLE_SPHINX=OFF    \
 -DLLVM_ENABLE_DOXYGEN=OFF   \
 -DCLANG_BUILD_EXAMPLES=OFF  \
 -DCLANG_INCLUDE_DOCS=OFF    \
 -DCLANG_INCLUDE_TESTS=OFF   \
\
 -Wno-dev -GNinja ..

# 5
/bin/busybox time samu -j2

# 6
instdir="$PWD/KEK"
DESTDIR="${instdir}" samu install

rm -rfv \
 "${instdir}"/opt/llvm-10.0.1/share/man \
 "${instdir}"/opt/llvm-10.0.1/share/clang/bash-autocomplete.sh

find "${instdir}"/opt/llvm-10.0.1/bin \
 -type f              -exec strip --strip-all      -v {} ';'

find "${instdir}"/opt/llvm-10.0.1/lib \
 -type f -name \*.a   -exec strip --strip-debug    -v {} ';'

find "${instdir}"/opt/llvm-10.0.1/lib \
 -type f -name \*.so* -exec strip --strip-unneeded -v {} ';'

# 7
doas -- cp -r  "${instdir}"/opt/llvm-10.0.1 /opt/
doas -- chown -R root:root /opt/llvm-10.0.1
