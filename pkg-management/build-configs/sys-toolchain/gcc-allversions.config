#!/mss/bin/sh
# apathy-musl 1.2 - mss@waifu.club
# build script for gcc stable releases and snapshots, version 3.

. /mss/bin/apathy-funcs

# a >> check if at least something is specified as dolla sihn one.
[ -z $1 ] && aprint_fail "no gcc version specified as \$1, exiting." && exit 1

# b1 >> set script vars
         logdir="/mss/work/logs"
       saucedir="/mss/work/sauces"
         _build="x86_64-apathy-linux-musl"
           _url="https://github.com/mssx86/apathy"

        tarball="${1}"
        _gccver="$(echo ${1} | sed 's/.tar.[xg]z//')"

    redirect_to="${logdir}"/$(date "+%Y%m%d_%H%M%S")-"${_gccver}".log

export   CFLAGS="-march=native -mtune=native -fstack-protector-strong"
export CXXFLAGS="${CFLAGS}"


# b2 >> set the configuring func
_configure(){
libat_cv_have_ifunc=no      \
../configure                \
 --prefix=/usr              \
 --mandir=/usr/share/man    \
 --infodir=/usr/share/info  \
\
 --build="${_build}"        \
 --with-bugurl="${_url}"    \
 --with-pkgversion="apathy" \
\
 --disable-multilib         \
 --disable-nls              \
 --disable-symvers          \
 --disable-libmpx           \
 --disable-libmudflap       \
 --disable-libsanitizer     \
 --disable-werror           \
 --disable-fixed-point      \
 --disable-libstdcxx-pch    \
\
 --with-system-zlib         \
 --enable-linker-build-id   \
 --enable-checking=release  \
 --enable-languages=c,c++   \
 --enable-__cxa_atexit      \
 --enable-default-pie       \
 --enable-default-ssp       \
 --enable-shared            \
 --enable-threads           \
 --enable-tls               \
  >> "$redirect_to" 2>&1
}

# c1 >> print versions
aprint_nc
lsdetail "gcc version" "${_gccver}"
lsdetail "build"       "${_build}"
aprint_nc
lsdetail "cflags"      "${CFLAGS}"
lsdetail "cxxflags"    "${CXXFLAGS}"
aprint_nc

# c2 >> extract gcc sauce
if [ -f "${saucedir}/${tarball}" ]
 then
  aprint_ret "extracting the ${cl_grn}gcc source${c_res} to current directory."
   tar xf "${saucedir}/${tarball}" > ${redirect_to} 2>&1
  evalretkill
  
  cd ${_gccver}
 else
  aprint_fail "gcc tarball does not exist in saucedir, exiting."; exit 1
fi

# d >> change the default libdir to /lib from /lib64
aprint_ret "running sed to change the default libdir to ${cl_grn}/lib${c_res}."
 sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
 sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
evalretkill

# e >> create build dir
aprint_nc
aprint_ret "creating the ${cl_grn}build${c_res} directory."
 mkdir -v build >> ${redirect_to} 2>&1
 cd build
evalretkill

# f >> running the configure 
aprint_ret "running the ${cl_grn}configure${c_res} script."
 _configure
evalretkill

# g >> run make
aprint_nc
aprint_ask "run make? (y/n): "
read answerbuildgcc

case "$answerbuildgcc" in
 y|Y|yes)
  aprint "current date is ${cl_grn}$(date '+%a %d %I:%M:%S%P')${c_res}."
  aprint "redirecting output to ${cl_grn}${redirect_to}${c_res}."
  aprint_ret "running make."
  datebefore=$(date +%s)

  /bin/busybox time                 \
   make V=0                         \
   CC=x86_64-apathy-linux-musl-gcc  \
   CXX=x86_64-apathy-linux-musl-g++ \
    >> ${redirect_to} 2>&1
  evalretkill

  dateafter=$(date +%s)
  timespent=$(($dateafter - $datebefore))
  humantime=$(printf "%dd %dh %dm\n"                    \
            "$(echo "${timespent}/86400"        | bc)"  \
            "$(echo "(${timespent}%86400)/3600" | bc)"  \
            "$(echo "(${timespent}%3600)/60"    | bc)")

  aprint_nc
  aprint "build finished in ${cl_grn}${humantime}${c_res}."
 ;;
 *)
  aprint "not running make."
  aprint_nc
  exit 0
 ;;
esac
