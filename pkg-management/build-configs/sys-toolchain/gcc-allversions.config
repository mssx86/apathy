#!/mss/bin/sh
# apathy-musl 1.1 - mss@waifu.club
# build script for gcc9 snapshots, version 2.

. /mss/bin/apathy-funcs

# a >> check if variables are set
[ -z $1 ] && aprint_fail "no gcc version specified as \$1, exiting."   && exit 1
[ -z $2 ] && aprint_fail "no makejob count specified as \$2, exiting." && exit 1
[ -z $3 ] && aprint_fail "no niceness specified as \$3, exiting."      && exit 1

case $4 in y|Y|yes)
 export answerbuildgcc="y"
 aprint_nc
 aprint "${cb_red}building and installing without asking for confirmation${c_res}."
 ;;
esac 

# b1 >> set script vars
   logdir="/mss/work/logs"
 saucedir="/mss/work/sauces"
 patchdir="/mss/repo/pkg-management/build-configs/sys-toolchain/gcc/patches"
   _build="x86_64-apathy-linux-musl"

  _gccver="${1}"
_makejobs="${2}"
_niceness="${3}"

export   CFLAGS="-march=native -mtune=native -fstack-protector-strong"
export CXXFLAGS="${CFLAGS}"

redirect_to="${logdir}"/$(date "+%Y%m%d_%H%M%S")-"${_gccver}".log

# b1.1 >> set and check if niceness is above 0
[ "$_niceness" -lt 0 ] && aprint_fail "niceness below 0 requires root access." && exit 1

# b2 >> set the configuring func
_configure(){
libat_cv_have_ifunc=no                             \
../configure                                       \
 --prefix=/usr                                     \
 --build=${_build}                                 \
 --with-bugurl="https://github.com/mssx86/apathy"  \
 --with-pkgversion="apathy"                        \
 --with-system-zlib                                \
 --disable-multilib                                \
 --disable-nls                                     \
 --disable-symvers                                 \
 --disable-libmpx                                  \
 --disable-libmudflap                              \
 --disable-libsanitizer                            \
 --disable-werror                                  \
 --disable-fixed-point                             \
 --disable-libstdcxx-pch                           \
 --enable-linker-build-id                          \
 --enable-checking=release                         \
 --enable-languages=c,c++                          \
 --enable-__cxa_atexit                             \
 --enable-default-pie                              \
 --enable-default-ssp                              \
 --enable-shared                                   \
 --enable-threads                                  \
 --enable-tls                                      \
 --mandir=/usr/share/man                           \
 --infodir=/usr/share/info                         \
  >> "$redirect_to" 2>&1
}

# c1 >> print versions
aprint_nc
lsdetail "gcc version" "${_gccver}"
lsdetail "build"       "${_build}"
aprint_nc
lsdetail "makejobs"    "${_makejobs}"
lsdetail "niceness"    "${_niceness}"
aprint_nc
lsdetail "cflags"      "${CFLAGS}"
lsdetail "cxxflags"    "${CXXFLAGS}"
aprint_nc

# c2 >> extract gcc sauce
if [ ! -f "${saucedir}/${_gccver}.tar.xz" ]
 then
  aprint_fail "gcc tarball does not exist in saucedir, exiting."; exit 1
 else
  aprint_ret "${cb_blu}extracting${c_res}\t: the ${cl_grn}gcc source${c_res} to current directory."
   tar xf "${saucedir}"/"${_gccver}".tar.xz > ${redirect_to} 2>&1
  evalretkill
  
  cd ${_gccver}
fi

# d1 >> change the default libdir to /lib from /lib64
aprint_nc
aprint_ret "running sed to change the default libdir to ${cl_grn}/lib${c_res}."
 sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
 sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
evalretkill

# d2 >> _FORTIFY_SOURCE needs an optimization level.
aprint_ret "${cl_grn}_FORTIFY_SOURCE${c_res} needs an optimization level."
 sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" gcc/configure libiberty/configure
evalretkill

# e >> create build dir
aprint_nc
aprint_ret "creating the ${cl_grn}build${c_res} directory."
 mkdir -v build >> ${redirect_to} 2>&1
 cd build
evalretkill

# f >> running the configure 
aprint_ret "running the ${cl_grn}configure${c_res} script."
 _configure
evalretkill

# g >> run make
aprint_nc
if [ -z "$answerbuildgcc" ]; then
 aprint_ask "run make? (y/n): "
 read answerbuildgcc
fi

case "$answerbuildgcc" in
 y|Y|yes)
  aprint "current date is ${cl_grn}$(date '+%a %d %I:%M:%S%P')${c_res}."
  aprint "redirecting output to ${cl_grn}${redirect_to}${c_res}."
  aprint_ret "running make."
  datebefore=$(date +%s)

  /bin/busybox time                \
   nice --adjustment="${_niceness}" \
   make V=0                         \
   CC=x86_64-apathy-linux-musl-gcc  \
   CXX=x86_64-apathy-linux-musl-g++ \
   -j${_makejobs} >> ${redirect_to} 2>&1
  evalretkill

  dateafter=$(date +%s)
  timespent=$(($dateafter - $datebefore))
  humantime=$(printf "%dd %dh %dm\n"                    \
            "$(echo "${timespent}/86400"        | bc)"  \
            "$(echo "(${timespent}%86400)/3600" | bc)"  \
            "$(echo "(${timespent}%3600)/60"    | bc)")

  aprint_nc
  aprint "build finished in ${cl_grn}${humantime}${c_res}."
 ;;
 n|N|no)
  aprint "not running make."
  aprint_nc
  exit 0
 ;;
esac
