#!/mss/bin/sh
# apathy musl 1.1 - mss@waifu.club
# build script for 5.6 kernels, version 2, for thinkpad t61

. /mss/bin/apathy-funcs

# a >> check if variables are set
if [ -z ${1} ]; then aprint_fail "no looncucks version specified, exiting."; exit 1; fi

# b1 >> set script vars
saucedir="/mss/work/sauces"
__kerver=$(printf "${1}" | sed 's/linux-//;s/.tar.xz//;s/.tar.gz//')
_workdir="/mss/work/table"
_makedir="${_workdir}/linux-${__kerver}"
_repodir="/mss/repo/pkg-management/build-configs/sys-kernel"
patchdir="${_repodir}/patches"
_confdir="${_repodir}/configs"
__logdir="/mss/work/logs"
redirect="${__logdir}/$(date "+%Y%m%d_%H%M%S")-linux-${__kerver}.log"

confname="5.6-apathy-t61-nonfree-gcc-bmq-20200411_143115.config"
_useconf="${_confdir}/5.6/${confname}"
localver="5.6-$(grep 'CONFIG_LOCALVERSION=' "${_useconf}" | sed 's/CONFIG_LOCALVERSION="-//;s/\"//g')"

_cctouse="x86_64-apathy-linux-musl-gcc"

# c >> functions
apply_alfredchen(){
 _alpatches="bmq_v5.6-r1.patch"

 for pp in $_alpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/alfredchen/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_bfq(){
 _bfqpatches=""

 for pp in $_bfqpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/bfq-dev/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_bfq_rev(){
 _bfqrevpatches=""

 for pp in $_bfqrevpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/bfq-revert/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_block(){
 _blockpatches=""

 for pp in $_blockpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/block/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_misc(){
 _miscpatches="0001-cpu-family-specific-optimization.patch
               0002-make-O3-always-available.patch
               0003-ohgodohfuck-panic.patch"

 for pp in $_miscpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/misc/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_zstd(){
 _zstdpatches="0001-lib-prepare-zstd-for-preboot-environment.patch
               0002-lib-prepare-xxhash-for-preboot-environment.patch
               0003-lib-add-zstd-support-to-decompress.patch
               0004-init-add-support-for-zstd-compressed-kernel.patch
               0005-usr-add-support-for-zstd-compressed-initramfs.patch
               0006-x86-bump-ZO_z_extra_bytes-margin-for-zstd.patch
               0007-x86-Add-support-for-ZSTD-compressed-kernel.patch"

 for pp in $_zstdpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/zstd/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

apply_clearlinux(){
 _cpatches=""

 for pp in $_cpatches
  do
   aprint_patch "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.6/clearlinux/${pp} >> ${redirect} 2>&1
   evalretkill
  done
}

# d0 >> print some shit
aprint_nc
lsdetail "localver" "${localver}"
lsdetail "confname" "${confname}"

# d1 >> clear old log
aprint_nc
aprint_ret "cleaning the old log, if it exists."
 printf '' > ${redirect}
evalret

# d2 >> unpack the kernel
if [ ! -f "${saucedir}/${1}" ]
 then aprint_fail "kernel sauce does not exist in saucedir, exiting."; exit 1;
fi

aprint_ret "unpacking the kernel sauce."
 tar xf ${saucedir}/${1} --directory="${_workdir}" >> ${redirect} 2>&1
evalretkill
cd "${_makedir}"

# d3 >> run mrproper
aprint_ret "running mrproper"
 make CC="$_cctouse" \
  mrproper >> ${redirect} 2>&1
evalretkill

# d4 >> copy config
aprint_ret "copying the kernel config stated above."
 cp -v "${_useconf}" "${_makedir}"/.config >> ${redirect} 2>&1
evalretkill

# d5 >> apply patches
aprint_nc
aprint "applying the alfredchen patches."
apply_alfredchen
#aprint "applying the bfq revert patches."
#apply_bfq_rev
#aprint "applying the bfq-dev (lucjan) patches."
#apply_bfq
#aprint "applying the block patches."
#apply_block
aprint "applying the zstd patches."
apply_zstd
aprint "applying the misc patches."
apply_misc
#aprint "applying the clearlinux patchset."
#apply_clearlinux

# d6 >> run menuconfig
aprint_nc
aprint_ask "run menuconfig for manual config? (y/n): "
read answermenuconf

if [ "$answermenuconf" != "${answermenuconf#[Yy]}" ]
 then
  aprint "running menuconfig."
  make CC="$_cctouse" \
   menuconfig
 else
  aprint "not running menuconfig."
  aprint_nc
fi

# d7 >> run make
aprint_ask "run make? (y/n): "
read answerbuildkern

if [ "$answerbuildkern" != "${answerbuildkern#[Yy]}" ]
 then
  aprint "current date is ${c_lcyan}$(date '+%a %d %I:%M:%S%P')${c_reset}."
  aprint "redirecting output to ${c_lcyan}${redirect}${c_reset}."
  aprint_ret "running make."
  datebefore=$(date +%s)

   /bin/busybox time     \
    nice --adjustment=10 \
    make CC="$_cctouse"   \
     -j2 >> ${redirect} 2>&1

  evalretkill

  dateafter=$(date +%s)
  timespent=$(($dateafter - $datebefore))
  humantime=$(printf "%dd %dh %dm\n"                      \
              "$(echo "${timespent}/86400"        | bc)"  \
              "$(echo "(${timespent}%86400)/3600" | bc)"  \
              "$(echo "(${timespent}%3600)/60"    | bc)")
  
  aprint "build finished in ${c_lcyan}${humantime}${c_reset}."

 else
  aprint "not running make."
  aprint_nc
  exit 0
fi

# e1 >> install modules if they exist
aprint_nc
if [ -z $(grep "=m" .config) ]
 then
  aprint "no modules found in config to install, skipping."
 else
  aprint "found modules, installing them."

   doas -- make CC="$_cctouse" \
    modules_install >> ${redirect} 2>&1

  evalretkill
  export modules=yes
fi

# e2 >> install kernel
aprint_nc
aprint_ask "install the built kernel? (y/n): "
read answerkinst

if [ "$answerkinst" != "${answerkinst#[Yy]}" ]
 then
  aprint "installing the built kernel."
   doas cp arch/x86/boot/bzImage /boot/vmlinuz    &&
   doas cp System.map            /boot/System.map &&
   doas cp .config               /boot/config

  aprint_ret "running ${c_lcyan}lilo${c_reset}."
   doas -- lilo >> ${redirect} 2>&1
  evalret
 else
  aprint "not installing the built kernel."
fi

# e3 >> package up the built kernel
aprint_nc
aprint_ask "package up the built kernel? (y/n): "
read answerpkgup

if [ "$answerpkgup" != "${answerpkgup#[Yy]}" ]
 then
  aprint_ret "packaging up the built kernel."

  localver=$(grep 'CONFIG_LOCALVERSION=' ${_makedir}/.config | sed 's/CONFIG_LOCALVERSION=//;s/\"//g')
  pkgupname="${__kerver}${localver}"
  archivename="${pkgupname}-$(date +%s)"
  storepkg="/mnt/mss/stuff/techy-bits/packaged-software/kernel"

  mkdir -p "${_workdir}/pkgup/boot"

  cp -iv ${_makedir}/arch/x86/boot/bzImage "${_workdir}/pkgup/boot/vmlinuz"    >> ${redirect} 2>&1
  cp -iv ${_makedir}/System.map            "${_workdir}/pkgup/boot/System.map" >> ${redirect} 2>&1
  cp -iv ${_makedir}/.config               "${_workdir}/pkgup/boot/config"     >> ${redirect} 2>&1
  
  if [ "${modules}" = "yes" ]
   then
    mkdir -p "${_workdir}/pkgup/lib/modules"
    cp -r /lib/modules/"${pkgupname}"     "${_workdir}/pkgup/lib/modules}"
  fi

  cd "${_workdir}"
  /mss/bin/pkgup "pkgup" "${storepkg}"/"${archivename}" >> ${redirect} 2>&1
  rm -rf "${_workdir}/pkgup"

  evalret
 else
  aprint "not running pkgup."
fi

# d9 >> clean up ram.
aprint_nc
aprint_ask "clean up the workdir in ram? (y/n): "
read answerclean

if [ "$answerclean" != "${answerclean#[Yy]}" ]
 then
  aprint_ret "cleaning up the workdir."
  rm -rf ${_makedir}
  evalret
 else
  aprint "not cleaning up the workdir."
fi
