#!/mss/bin/sh
# apathy musl 1.1 - mss@waifu.club
# build script for 5.5.x kernels, version 1

. /mss/bin/apathy-funcs

# a >> check if variables are set
if [ -z ${1} ]; then aprint_fail "no looncucks version specified, exiting."; exit 1; fi

# b1 >> set script vars
saucedir="/mss/work/sauces"
__kerver=$(printf "${1}" | sed 's/linux-//;s/.tar.xz//;s/.tar.gz//')
_workdir="/mss/ram"
_makedir="${_workdir}/linux-${__kerver}"
_repodir="/mss/repo/pkg-management/build-configs/sys-kernel"
patchdir="${_repodir}/patches"
_confdir="${_repodir}/configs"

confname="5.5-apathy-nonfree-gcc-cfs-26-dec-2019.config"
_useconf="${_confdir}/5.5/${confname}"
localver="5.5-$(grep 'CONFIG_LOCALVERSION=' "${_useconf}" | sed 's/CONFIG_LOCALVERSION="-//;s/\"//g')"

# c >> functions
apply_deblob(){
 aprint_patch "applying" "gnu deblob patches"
  patch -p1 < "${patchdir}"/deblob/5.4-deblob-gnu.patch >>/tmp/kernel-build.log 2>&1
 evalretkill
}

apply_freedo(){
 aprint_patch "applying" "freedo logo"
  install -m644 -t "${_makedir}"/drivers/video/logo "${patchdir}"/other/freedo-logo/logo_linux_clut224.ppm
  install -m644 -t "${_makedir}"/drivers/video/logo "${patchdir}"/other/freedo-logo/logo_linux_vga16.ppm
  install -m644 -t "${_makedir}"/drivers/video/logo "${patchdir}"/other/freedo-logo/logo_linux_mono.pbm
 evalretkill
}

apply_apathy(){
 _apatches="
        0001-cpu-family-specific-optimization.patch
        0002-make-O3-always-available.patch
        0003-ohgodohfuck-panic.patch"

 for pp in $_apatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_alfredchen(){
 _alpatches="0001-bmq_v5.4-r0.patch"

 for pp in $_alpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.4/alfredchen/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_clearlinux(){
 _cpatches="
        0001-Increase-the-ext4-default-commit-age.patch
        0002-pci-pme-wakeups.patch
        0003-ksm-wakeups.patch
        0004-intel_idle-tweak-cpuidle-cstates.patch
        0005-smpboot-reuse-timer-calibration.patch
        0006-Initialize-ata-before-graphics.patch
        0007-give-rdrand-some-credit.patch
        0008-ipv4-tcp-allow-the-memory-tuning-for-tcp.patch
        0009-kernel-time-reduce-ntp-wakeups.patch
        0010-use-lfence-instead-of-rep-and-nop.patch
        0011-do-accept-in-LIFO-order-for-cache-efficiency.patch
        0012-locking-rwsem-spin-faster.patch
        0013-ata-libahci-ignore-staggered-spin-up.patch
        0014-print-CPU-that-faults.patch
        0015-CVE-2019-12379.patch"

 for pp in $_cpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/clearlinux/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

# d0 >> print some shit
aprint_nc
aprint_pvars "localver" "${localver}"
aprint_pvars "confname" "${confname}"

# d1 >> clear old log
aprint_nc
aprint_ret "cleaning the old log, if it exists."
 printf '' > "/tmp/kernel-build.log"
evalret

# d2 >> unpack the kernel
if [ ! -f "${saucedir}/${1}" ]
 then aprint_fail "kernel sauce does not exist in saucedir, exiting."; exit 1;
fi

aprint_ret "unpacking the kernel sauce."
 tar xf ${saucedir}/${1} --directory="${_workdir}" >>/tmp/kernel-build.log 2>&1
evalretkill
cd "${_makedir}"

# d3 >> run mrproper
aprint_ret "running mrproper"
 make mrproper >>/tmp/kernel-build.log 2>&1
evalretkill

# d4 >> copy config
aprint_ret "copying the kernel config stated above."
 cp -v "${_useconf}" "${_makedir}"/.config >>/tmp/kernel-build.log 2>&1
evalretkill

# d5 >> apply patches
aprint_nc
#aprint "deblobbing the kernel."
#apply_deblob
#apply_freedo

#aprint "applying the alfredchen bmq patches."
#apply_alfredchen

aprint "applying the apathy patchset."
apply_apathy

aprint "applying the clearlinux patchset."
apply_clearlinux

# d6 >> run menuconfig
aprint_nc
aprint_ask "run menuconfig for manual config? (y/n): "
read answermenuconf

if [ "$answermenuconf" != "${answermenuconf#[Yy]}" ]
 then aprint "running menuconfig." && make menuconfig
 else aprint "not running menuconfig."
fi

# d7 >> run make
aprint_nc
aprint_ask "run make? (y/n): "
read answerbuildkern

if [ "$answerbuildkern" != "${answerbuildkern#[Yy]}" ]
 then
  aprint_ret "running make, do tail -f /tmp/kernel-build.log to view."
  make \
   CC=x86_64-apathy-linux-musl-gcc \
   -j$(($(nproc)+1)) >>/tmp/kernel-build.log 2>&1
  evalretkill
 else
  aprint "not running make."
  aprint_nc
  exit 0
fi

# e1 >> install modules if they exist
aprint_nc
if [ -z $(grep "=m" .config) ]
 then
  aprint "no modules found in config to install, skipping."
 else
  aprint "found modules, installing them."
  doas -- make modules_install >>/tmp/kernel-build.log
  evalretkill
  export modules=yes
fi

# e2 >> install kernel
aprint_nc
aprint_ask "install the built kernel? (y/n): "
read answerkinst

if [ "$answerkinst" != "${answerkinst#[Yy]}" ]
 then
  aprint "installing the built kernel."
  doas cp arch/x86/boot/bzImage /boot/vmlinuz    &&
  doas cp System.map            /boot/System.map &&
  doas cp .config               /boot/config
 else
  aprint "not installing the built kernel."
fi

# e3 >> package up the built kernel
aprint_nc
aprint_ask "package up the built kernel? (y/n): "
read answerpkgup

if [ "$answerpkgup" != "${answerpkgup#[Yy]}" ]
 then
  aprint_ret "packaging up the built kernel."

  localver=$(grep 'CONFIG_LOCALVERSION=' ${_makedir}/.config | sed 's/CONFIG_LOCALVERSION=//;s/\"//g')
  pkgupname="${__kerver}${localver}"
  archivename="${pkgupname}-$(date +%s)"
  storepkg="/mnt/mss/stuff/techy-bits/packaged-software/kernel"

  mkdir -p "${_workdir}/pkgup/boot"

  cp -i ${_makedir}/arch/x86/boot/bzImage "${_workdir}/pkgup/boot/vmlinuz"
  cp -i ${_makedir}/System.map            "${_workdir}/pkgup/boot/System.map"
  cp -i ${_makedir}/.config               "${_workdir}/pkgup/boot/config"
  
  if [ "${modules}" = "yes" ]
   then
    mkdir -p "${_workdir}/pkgup/lib/modules"
    cp -r /lib/modules/"${pkgupname}"     "${_workdir}/pkgup/lib/modules}"
  fi

  cd "${_workdir}"
  /mss/bin/pkgup "pkgup" "${storepkg}"/"${archivename}" > /dev/null 2>&1    &&
  rm -rf "${_workdir}/pkgup"

  evalret
 else
  aprint "not running pkgup."
fi

# d9 >> clean up ram.
aprint_nc
aprint_ask "clean up the workdir in ram? (y/n): "
read answerclean

if [ "$answerclean" != "${answerclean#[Yy]}" ]
 then
  aprint_ret "cleaning up the workdir."
  rm -rf ${_makedir}
  evalret
 else
  aprint "not cleaning up the workdir."
fi







































