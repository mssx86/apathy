#!/mss/bin/sh
# apathy musl 1.1 - mss@waifu.club
# build script for 5.5.x kernels, version 1, for thinkpad t61

. /mss/bin/apathy-funcs

# a >> check if variables are set
if [ -z ${1} ]; then aprint_fail "no looncucks version specified, exiting."; exit 1; fi

# b1 >> set script vars
saucedir="/mss/work/sauces"
__kerver=$(printf "${1}" | sed 's/linux-//;s/.tar.xz//;s/.tar.gz//')
_workdir="/mss/work/table"
_makedir="${_workdir}/linux-${__kerver}"
_repodir="/mss/repo/pkg-management/build-configs/sys-kernel"
patchdir="${_repodir}/patches"
_confdir="${_repodir}/configs"

confname="5.5-apathy-t61-nonfree-gcc-bmq-27-jan-2020.config"
_useconf="${_confdir}/5.5/${confname}"
localver="5.5-$(grep 'CONFIG_LOCALVERSION=' "${_useconf}" | sed 's/CONFIG_LOCALVERSION="-//;s/\"//g')"

# c >> functions
apply_alfredchen(){
 _alpatches="0001-bmq-v5.5-r0.patch"

 for pp in $_alpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/alfredchen/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_bfq(){
 _bfqpatches="0001-revert-block-bfq-skip-tracing-hooks-if-possible.patch
              0002-debug-add-logs-and-bug_ons.patch
              0003-do-not-plug-i-o-for-bfq_queues-with-no-pro.patch
              0004-debug-check-proc-refs-in-case-of-requeue.patch
              0005-do-not-insert-oom-queue-into-position-tree.patch
              0006-debug-fix-check-on-oom-in-split-add-more-c.patch
              0007-get-extra-ref-to-prevent-a-queue-from-bein.patch
              0008-debug-check-that-an-entity-on-a-st-is-not-.patch
              0009-debug-init_entity-should-actually-be-invok.patch
              0010-extend-incomplete-name-of-field-on_st.patch
              0011-get-a-ref-to-a-group-when-adding-it-to-a-s.patch
              0012-clarify-the-goal-of-bfq_split_bfqq.patch
              0013-make-bfq-disable-iocost-when-enabled.patch
              0014-remove-unused-bfq_class_rt-which-never-use.patch
              0015-improve-arithmetic-division-in-bfq_delta.patch
              0016-elevator-set-default-scheduler-to-bfq-for-blk-mq.patch
              0017-set-bfq-dev-instead-of-bfq.patch"

 for pp in $_bfqpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/bfq-dev/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_block(){
 _blockpatches="0001-Kconfig.iosched-set-default-value-of-IOSCHED_B.patch
                0002-Fix-depends-for-BLK_DEV_ZONED.patch
                0003-set-rq_affinity-2-for-full-multithreading-I-O-.patch"

 for pp in $_blockpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/block/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_misc(){
 _miscpatches="0001-cpu-family-specific-optimization.patch
               0002-make-O3-always-available.patch
               0003-ohgodohfuck-panic.patch"

 for pp in $_miscpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/misc/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

apply_clearlinux(){
 _cpatches="0001-Increase-the-ext4-default-commit-age.patch
            0002-pci-pme-wakeups.patch
            0003-ksm-wakeups.patch
            0004-intel_idle-tweak-cpuidle-cstates.patch
            0005-smpboot-reuse-timer-calibration.patch
            0006-Initialize-ata-before-graphics.patch
            0007-give-rdrand-some-credit.patch
	    0008-ipv4-tcp-allow-the-memory-tuning-for-tcp.patch
            0009-kernel-time-reduce-ntp-wakeups.patch
            0010-use-lfence-instead-of-rep-and-nop.patch
            0011-do-accept-in-LIFO-order-for-cache-efficiency.patch
            0012-locking-rwsem-spin-faster.patch
            0013-ata-libahci-ignore-staggered-spin-up.patch
            0014-print-CPU-that-faults.patch
            0015-CVE-2019-12379.patch"

 for pp in $_cpatches
  do
   aprint_patch "applying" "${pp}"
   patch -p1 < "${patchdir}"/apathy/5.5/clearlinux/${pp} >>/tmp/kernel-build.log 2>&1
   evalretkill
  done
}

# d0 >> print some shit
aprint_nc
aprint_pvars "localver" "${localver}"
aprint_pvars "confname" "${confname}"

# d1 >> clear old log
aprint_nc
aprint_ret "cleaning the old log, if it exists."
 printf '' > "/tmp/kernel-build.log"
evalret

# d2 >> unpack the kernel
if [ ! -f "${saucedir}/${1}" ]
 then aprint_fail "kernel sauce does not exist in saucedir, exiting."; exit 1;
fi

aprint_ret "unpacking the kernel sauce."
 tar xf ${saucedir}/${1} --directory="${_workdir}" >>/tmp/kernel-build.log 2>&1
evalretkill
cd "${_makedir}"

# d3 >> run mrproper
aprint_ret "running mrproper"
 make mrproper >>/tmp/kernel-build.log 2>&1
evalretkill

# d4 >> copy config
aprint_ret "copying the kernel config stated above."
 cp -v "${_useconf}" "${_makedir}"/.config >>/tmp/kernel-build.log 2>&1
evalretkill

# d5 >> apply patches
aprint_nc
aprint "applying the alfredchen patches."
apply_alfredchen
aprint "applying the bfq-dev (lucjan) patches."
apply_bfq
aprint "applying the block patches."
apply_block
aprint "applying the misc patches."
apply_misc
aprint "applying the clearlinux patchset."
apply_clearlinux

# d6 >> run menuconfig
aprint_nc
aprint_ask "run menuconfig for manual config? (y/n): "
read answermenuconf

if [ "$answermenuconf" != "${answermenuconf#[Yy]}" ]
 then aprint "running menuconfig." && make menuconfig
 else aprint "not running menuconfig."
fi

# d7 >> run make
aprint_nc
aprint_ask "run make? (y/n): "
read answerbuildkern

if [ "$answerbuildkern" != "${answerbuildkern#[Yy]}" ]
 then
  aprint_ret "running make, do tail -f /tmp/kernel-build.log to view."
   datebefore=$(date +%s)
   /bin/busybox time   \
   nice --adjustment=0 \
   make V=0            \
   CC=x86_64-apathy-linux-musl-gcc \
   -j$(($(nproc)+1)) >>/tmp/kernel-build.log 2>&1
  evalretkill

  dateafter=$(date +%s)
  timespent=$(($dateafter - $datebefore))
  humantime=$(printf "%dd %dh %dm\n"                      \
              "$(echo "${timespent}/86400"        | bc)"  \
              "$(echo "(${timespent}%86400)/3600" | bc)"  \
              "$(echo "(${timespent}%3600)/60"    | bc)")
  
  aprint "build finished in ${c_lcyan}${humantime}${c_reset}."

 else
  aprint "not running make."
  aprint_nc
  exit 0
fi

# e1 >> install modules if they exist
aprint_nc
if [ -z $(grep "=m" .config) ]
 then
  aprint "no modules found in config to install, skipping."
 else
  aprint "found modules, installing them."
  doas -- make modules_install >>/tmp/kernel-build.log
  evalretkill
  export modules=yes
fi

# e2 >> install kernel
aprint_nc
aprint_ask "install the built kernel? (y/n): "
read answerkinst

if [ "$answerkinst" != "${answerkinst#[Yy]}" ]
 then
  aprint "installing the built kernel."
  doas cp arch/x86/boot/bzImage /boot/vmlinuz    &&
  doas cp System.map            /boot/System.map &&
  doas cp .config               /boot/config
 else
  aprint "not installing the built kernel."
fi

# e3 >> package up the built kernel
aprint_nc
aprint_ask "package up the built kernel? (y/n): "
read answerpkgup

if [ "$answerpkgup" != "${answerpkgup#[Yy]}" ]
 then
  aprint_ret "packaging up the built kernel."

  localver=$(grep 'CONFIG_LOCALVERSION=' ${_makedir}/.config | sed 's/CONFIG_LOCALVERSION=//;s/\"//g')
  pkgupname="${__kerver}${localver}"
  archivename="${pkgupname}-$(date +%s)"
  storepkg="/mnt/mss/stuff/techy-bits/packaged-software/kernel"

  mkdir -p "${_workdir}/pkgup/boot"

  cp -i ${_makedir}/arch/x86/boot/bzImage "${_workdir}/pkgup/boot/vmlinuz"
  cp -i ${_makedir}/System.map            "${_workdir}/pkgup/boot/System.map"
  cp -i ${_makedir}/.config               "${_workdir}/pkgup/boot/config"
  
  if [ "${modules}" = "yes" ]
   then
    mkdir -p "${_workdir}/pkgup/lib/modules"
    cp -r /lib/modules/"${pkgupname}"     "${_workdir}/pkgup/lib/modules}"
  fi

  cd "${_workdir}"
  /mss/bin/pkgup "pkgup" "${storepkg}"/"${archivename}" > /dev/null 2>&1    &&
  rm -rf "${_workdir}/pkgup"

  evalret
 else
  aprint "not running pkgup."
fi

# d9 >> clean up ram.
aprint_nc
aprint_ask "clean up the workdir in ram? (y/n): "
read answerclean

if [ "$answerclean" != "${answerclean#[Yy]}" ]
 then
  aprint_ret "cleaning up the workdir."
  rm -rf ${_makedir}
  evalret
 else
  aprint "not cleaning up the workdir."
fi
