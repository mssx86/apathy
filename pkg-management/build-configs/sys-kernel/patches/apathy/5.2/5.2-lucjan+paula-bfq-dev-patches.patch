diff -uarN a/block/bfq-cgroup.c b/block/bfq-cgroup.c
--- a/block/bfq-cgroup.c	2019-08-29 09:30:28.000000000 +0300
+++ b/block/bfq-cgroup.c	2019-08-31 04:10:17.149908739 +0300
@@ -828,7 +828,7 @@
 	bfq_end_wr_async_queues(bfqd, bfqd->root_group);
 }
 
-static int bfq_io_show_weight(struct seq_file *sf, void *v)
+static int bfq_io_show_weight_legacy(struct seq_file *sf, void *v)
 {
 	struct blkcg *blkcg = css_to_blkcg(seq_css(sf));
 	struct bfq_group_data *bfqgd = blkcg_to_bfqgd(blkcg);
@@ -842,6 +842,60 @@
 	return 0;
 }
 
+static u64 bfqg_prfill_weight_device(struct seq_file *sf,
+				     struct blkg_policy_data *pd, int off)
+{
+	struct bfq_group *bfqg = pd_to_bfqg(pd);
+
+	if (!bfqg->entity.dev_weight)
+		return 0;
+	return __blkg_prfill_u64(sf, pd, bfqg->entity.dev_weight);
+}
+
+static int bfq_io_show_weight(struct seq_file *sf, void *v)
+{
+	struct blkcg *blkcg = css_to_blkcg(seq_css(sf));
+	struct bfq_group_data *bfqgd = blkcg_to_bfqgd(blkcg);
+
+	seq_printf(sf, "default %u\n", bfqgd->weight);
+	blkcg_print_blkgs(sf, blkcg, bfqg_prfill_weight_device,
+			  &blkcg_policy_bfq, 0, false);
+	return 0;
+}
+
+static void bfq_group_set_weight(struct bfq_group *bfqg, u64 weight, u64 dev_weight)
+{
+	weight = dev_weight ?: weight;
+
+	bfqg->entity.dev_weight = dev_weight;
+	/*
+	 * Setting the prio_changed flag of the entity
+	 * to 1 with new_weight == weight would re-set
+	 * the value of the weight to its ioprio mapping.
+	 * Set the flag only if necessary.
+	 */
+	if ((unsigned short)weight != bfqg->entity.new_weight) {
+		bfqg->entity.new_weight = (unsigned short)weight;
+		/*
+		 * Make sure that the above new value has been
+		 * stored in bfqg->entity.new_weight before
+		 * setting the prio_changed flag. In fact,
+		 * this flag may be read asynchronously (in
+		 * critical sections protected by a different
+		 * lock than that held here), and finding this
+		 * flag set may cause the execution of the code
+		 * for updating parameters whose value may
+		 * depend also on bfqg->entity.new_weight (in
+		 * __bfq_entity_update_weight_prio).
+		 * This barrier makes sure that the new value
+		 * of bfqg->entity.new_weight is correctly
+		 * seen in that code.
+		 */
+		smp_wmb();
+		bfqg->entity.prio_changed = 1;
+	}
+}
+
 static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
 				    struct cftype *cftype,
 				    u64 val)
@@ -860,55 +914,72 @@
 	hlist_for_each_entry(blkg, &blkcg->blkg_list, blkcg_node) {
 		struct bfq_group *bfqg = blkg_to_bfqg(blkg);
 
-		if (!bfqg)
-			continue;
-		/*
-		 * Setting the prio_changed flag of the entity
-		 * to 1 with new_weight == weight would re-set
-		 * the value of the weight to its ioprio mapping.
-		 * Set the flag only if necessary.
-		 */
-		if ((unsigned short)val != bfqg->entity.new_weight) {
-			bfqg->entity.new_weight = (unsigned short)val;
-			/*
-			 * Make sure that the above new value has been
-			 * stored in bfqg->entity.new_weight before
-			 * setting the prio_changed flag. In fact,
-			 * this flag may be read asynchronously (in
-			 * critical sections protected by a different
-			 * lock than that held here), and finding this
-			 * flag set may cause the execution of the code
-			 * for updating parameters whose value may
-			 * depend also on bfqg->entity.new_weight (in
-			 * __bfq_entity_update_weight_prio).
-			 * This barrier makes sure that the new value
-			 * of bfqg->entity.new_weight is correctly
-			 * seen in that code.
-			 */
-			smp_wmb();
-			bfqg->entity.prio_changed = 1;
-		}
+		if (bfqg)
+			bfq_group_set_weight(bfqg, val, 0);
 	}
 	spin_unlock_irq(&blkcg->lock);
 
 	return ret;
 }
 
-static ssize_t bfq_io_set_weight(struct kernfs_open_file *of,
-				 char *buf, size_t nbytes,
-				 loff_t off)
+static ssize_t bfq_io_set_device_weight(struct kernfs_open_file *of,
+					char *buf, size_t nbytes,
+					loff_t off)
 {
-	u64 weight;
-	/* First unsigned long found in the file is used */
-	int ret = kstrtoull(strim(buf), 0, &weight);
+	int ret;
+	struct blkg_conf_ctx ctx;
+	struct blkcg *blkcg = css_to_blkcg(of_css(of));
+	struct bfq_group *bfqg;
+	u64 v;
 
+	ret = blkg_conf_prep(blkcg, &blkcg_policy_bfq, buf, &ctx);
 	if (ret)
 		return ret;
 
-	ret = bfq_io_set_weight_legacy(of_css(of), NULL, weight);
+	if (sscanf(ctx.body, "%llu", &v) == 1) {
+		/* require "default" on dfl */
+		ret = -ERANGE;
+		if (!v)
+			goto out;
+	} else if (!strcmp(strim(ctx.body), "default")) {
+		v = 0;
+	} else {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	bfqg = blkg_to_bfqg(ctx.blkg);
+
+	ret = -ERANGE;
+	if (!v || (v >= BFQ_MIN_WEIGHT && v <= BFQ_MAX_WEIGHT)) {
+		bfq_group_set_weight(bfqg, bfqg->entity.weight, v);
+		ret = 0;
+	}
+out:
+	blkg_conf_finish(&ctx);
 	return ret ?: nbytes;
 }
 
+static ssize_t bfq_io_set_weight(struct kernfs_open_file *of,
+				 char *buf, size_t nbytes,
+				 loff_t off)
+{
+	char *endp;
+	int ret;
+	u64 v;
+
+	buf = strim(buf);
+
+	/* "WEIGHT" or "default WEIGHT" sets the default weight */
+	v = simple_strtoull(buf, &endp, 0);
+	if (*endp == '\0' || sscanf(buf, "default %llu", &v) == 1) {
+		ret = bfq_io_set_weight_legacy(of_css(of), NULL, v);
+		return ret ?: nbytes;
+	}
+
+	return bfq_io_set_device_weight(of, buf, nbytes, off);
+}
+
 #ifdef CONFIG_DEBUG_BLK_CGROUP
 static int bfqg_print_stat(struct seq_file *sf, void *v)
 {
@@ -1047,9 +1118,15 @@
 	{
 		.name = "bfq.weight",
 		.flags = CFTYPE_NOT_ON_ROOT,
-		.seq_show = bfq_io_show_weight,
+		.seq_show = bfq_io_show_weight_legacy,
 		.write_u64 = bfq_io_set_weight_legacy,
 	},
+	{
+		.name = "bfq.weight_device",
+		.flags = CFTYPE_NOT_ON_ROOT,
+		.seq_show = bfq_io_show_weight,
+		.write = bfq_io_set_weight,
+	},
 
 	/* statistics, covers only the tasks in the bfqg */
 	{
diff -uarN a/block/bfq-cgroup.c.rej b/block/bfq-cgroup.c.rej
--- a/block/bfq-cgroup.c.rej	1970-01-01 02:00:00.000000000 +0200
+++ b/block/bfq-cgroup.c.rej	2019-08-31 04:10:17.149908739 +0300
@@ -0,0 +1,215 @@
+--- block/bfq-cgroup.c
++++ block/bfq-cgroup.c
+@@ -828,7 +828,7 @@ void bfq_end_wr_async(struct bfq_data *bfqd)
+ 	bfq_end_wr_async_queues(bfqd, bfqd->root_group);
+ }
+ 
+-static int bfq_io_show_weight_legacy(struct seq_file *sf, void *v)
++static int bfq_io_show_weight(struct seq_file *sf, void *v)
+ {
+ 	struct blkcg *blkcg = css_to_blkcg(seq_css(sf));
+ 	struct bfq_group_data *bfqgd = blkcg_to_bfqgd(blkcg);
+@@ -842,32 +842,8 @@ static int bfq_io_show_weight_legacy(struct seq_file *sf, void *v)
+ 	return 0;
+ }
+ 
+-static u64 bfqg_prfill_weight_device(struct seq_file *sf,
+-				     struct blkg_policy_data *pd, int off)
+-{
+-	struct bfq_group *bfqg = pd_to_bfqg(pd);
+-
+-	if (!bfqg->entity.dev_weight)
+-		return 0;
+-	return __blkg_prfill_u64(sf, pd, bfqg->entity.dev_weight);
+-}
+-
+-static int bfq_io_show_weight(struct seq_file *sf, void *v)
+-{
+-	struct blkcg *blkcg = css_to_blkcg(seq_css(sf));
+-	struct bfq_group_data *bfqgd = blkcg_to_bfqgd(blkcg);
+-
+-	seq_printf(sf, "default %u\n", bfqgd->weight);
+-	blkcg_print_blkgs(sf, blkcg, bfqg_prfill_weight_device,
+-			  &blkcg_policy_bfq, 0, false);
+-	return 0;
+-}
+-
+-static void bfq_group_set_weight(struct bfq_group *bfqg, u64 weight, u64 dev_weight)
++static void bfq_group_set_weight(struct bfq_group *bfqg, u64 weight)
+ {
+-	weight = dev_weight ?: weight;
+-
+-	bfqg->entity.dev_weight = dev_weight;
+ 	/*
+ 	 * Setting the prio_changed flag of the entity
+ 	 * to 1 with new_weight == weight would re-set
+@@ -915,69 +891,26 @@ static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
+ 		struct bfq_group *bfqg = blkg_to_bfqg(blkg);
+ 
+ 		if (bfqg)
+-			bfq_group_set_weight(bfqg, val, 0);
++			bfq_group_set_weight(bfqg, val);
+ 	}
+ 	spin_unlock_irq(&blkcg->lock);
+ 
+ 	return ret;
+ }
+ 
+-static ssize_t bfq_io_set_device_weight(struct kernfs_open_file *of,
+-					char *buf, size_t nbytes,
+-					loff_t off)
+-{
+-	int ret;
+-	struct blkg_conf_ctx ctx;
+-	struct blkcg *blkcg = css_to_blkcg(of_css(of));
+-	struct bfq_group *bfqg;
+-	u64 v;
+-
+-	ret = blkg_conf_prep(blkcg, &blkcg_policy_bfq, buf, &ctx);
+-	if (ret)
+-		return ret;
+-
+-	if (sscanf(ctx.body, "%llu", &v) == 1) {
+-		/* require "default" on dfl */
+-		ret = -ERANGE;
+-		if (!v)
+-			goto out;
+-	} else if (!strcmp(strim(ctx.body), "default")) {
+-		v = 0;
+-	} else {
+-		ret = -EINVAL;
+-		goto out;
+-	}
+-
+-	bfqg = blkg_to_bfqg(ctx.blkg);
+-
+-	ret = -ERANGE;
+-	if (!v || (v >= BFQ_MIN_WEIGHT && v <= BFQ_MAX_WEIGHT)) {
+-		bfq_group_set_weight(bfqg, bfqg->entity.weight, v);
+-		ret = 0;
+-	}
+-out:
+-	blkg_conf_finish(&ctx);
+-	return ret ?: nbytes;
+-}
+-
+ static ssize_t bfq_io_set_weight(struct kernfs_open_file *of,
+ 				 char *buf, size_t nbytes,
+ 				 loff_t off)
+ {
+-	char *endp;
+-	int ret;
+-	u64 v;
+-
+-	buf = strim(buf);
++	u64 weight;
++	/* First unsigned long found in the file is used */
++	int ret = kstrtoull(strim(buf), 0, &weight);
+ 
+-	/* "WEIGHT" or "default WEIGHT" sets the default weight */
+-	v = simple_strtoull(buf, &endp, 0);
+-	if (*endp == '\0' || sscanf(buf, "default %llu", &v) == 1) {
+-		ret = bfq_io_set_weight_legacy(of_css(of), NULL, v);
+-		return ret ?: nbytes;
+-	}
++	if (ret)
++		return ret;
+ 
+-	return bfq_io_set_device_weight(of, buf, nbytes, off);
++	ret = bfq_io_set_weight_legacy(of_css(of), NULL, weight);
++	return ret ?: nbytes;
+ }
+ 
+ #ifdef CONFIG_DEBUG_BLK_CGROUP
+@@ -1118,14 +1051,8 @@ struct cftype bfq_blkcg_legacy_files[] = {
+ 	{
+ 		.name = "bfq.weight",
+ 		.flags = CFTYPE_NOT_ON_ROOT,
+-		.seq_show = bfq_io_show_weight_legacy,
+-		.write_u64 = bfq_io_set_weight_legacy,
+-	},
+-	{
+-		.name = "bfq.weight_device",
+-		.flags = CFTYPE_NOT_ON_ROOT,
+ 		.seq_show = bfq_io_show_weight,
+-		.write = bfq_io_set_weight,
++		.write_u64 = bfq_io_set_weight_legacy,
+ 	},
+ 
+ 	/* statistics, covers only the tasks in the bfqg */
+--- block/bfq-cgroup.c
++++ block/bfq-cgroup.c
+@@ -842,36 +842,6 @@ static int bfq_io_show_weight(struct seq_file *sf, void *v)
+ 	return 0;
+ }
+ 
+-static void bfq_group_set_weight(struct bfq_group *bfqg, u64 weight)
+-{
+-	/*
+-	 * Setting the prio_changed flag of the entity
+-	 * to 1 with new_weight == weight would re-set
+-	 * the value of the weight to its ioprio mapping.
+-	 * Set the flag only if necessary.
+-	 */
+-	if ((unsigned short)weight != bfqg->entity.new_weight) {
+-		bfqg->entity.new_weight = (unsigned short)weight;
+-		/*
+-		 * Make sure that the above new value has been
+-		 * stored in bfqg->entity.new_weight before
+-		 * setting the prio_changed flag. In fact,
+-		 * this flag may be read asynchronously (in
+-		 * critical sections protected by a different
+-		 * lock than that held here), and finding this
+-		 * flag set may cause the execution of the code
+-		 * for updating parameters whose value may
+-		 * depend also on bfqg->entity.new_weight (in
+-		 * __bfq_entity_update_weight_prio).
+-		 * This barrier makes sure that the new value
+-		 * of bfqg->entity.new_weight is correctly
+-		 * seen in that code.
+-		 */
+-		smp_wmb();
+-		bfqg->entity.prio_changed = 1;
+-	}
+-}
+-
+ static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
+ 				    struct cftype *cftype,
+ 				    u64 val)
+@@ -890,8 +860,34 @@ static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *css,
+ 	hlist_for_each_entry(blkg, &blkcg->blkg_list, blkcg_node) {
+ 		struct bfq_group *bfqg = blkg_to_bfqg(blkg);
+ 
+-		if (bfqg)
+-			bfq_group_set_weight(bfqg, val);
++		if (!bfqg)
++			continue;
++		/*
++		 * Setting the prio_changed flag of the entity
++		 * to 1 with new_weight == weight would re-set
++		 * the value of the weight to its ioprio mapping.
++		 * Set the flag only if necessary.
++		 */
++		if ((unsigned short)val != bfqg->entity.new_weight) {
++			bfqg->entity.new_weight = (unsigned short)val;
++			/*
++			 * Make sure that the above new value has been
++			 * stored in bfqg->entity.new_weight before
++			 * setting the prio_changed flag. In fact,
++			 * this flag may be read asynchronously (in
++			 * critical sections protected by a different
++			 * lock than that held here), and finding this
++			 * flag set may cause the execution of the code
++			 * for updating parameters whose value may
++			 * depend also on bfqg->entity.new_weight (in
++			 * __bfq_entity_update_weight_prio).
++			 * This barrier makes sure that the new value
++			 * of bfqg->entity.new_weight is correctly
++			 * seen in that code.
++			 */
++			smp_wmb();
++			bfqg->entity.prio_changed = 1;
++		}
+ 	}
+ 	spin_unlock_irq(&blkcg->lock);
+ 
diff -uarN a/block/bfq-iosched.c b/block/bfq-iosched.c
--- a/block/bfq-iosched.c	2019-08-29 09:30:28.000000000 +0300
+++ b/block/bfq-iosched.c	2019-08-31 04:09:56.519909050 +0300
@@ -2085,14 +2085,9 @@
 	    blk_rq_pos(container_of(rb_prev(&req->rb_node),
 				    struct request, rb_node))) {
 		struct bfq_queue *bfqq = bfq_init_rq(req);
-		struct bfq_data *bfqd;
+		struct bfq_data *bfqd = bfqq->bfqd;
 		struct request *prev, *next_rq;
 
-		if (!bfqq)
-			return;
-
-		bfqd = bfqq->bfqd;
-
 		/* Reposition request in its sort_list */
 		elv_rb_del(&bfqq->sort_list, req);
 		elv_rb_add(&bfqq->sort_list, req);
@@ -2139,9 +2134,6 @@
 	struct bfq_queue *bfqq = bfq_init_rq(rq),
 		*next_bfqq = bfq_init_rq(next);
 
-	if (!bfqq)
-		return;
-
 	/*
 	 * If next and rq belong to the same bfq_queue and next is older
 	 * than rq, then reposition rq in the fifo (by substituting next
@@ -5069,12 +5061,12 @@
 
 	spin_lock_irq(&bfqd->lock);
 	bfqq = bfq_init_rq(rq);
-	if (!bfqq || at_head || blk_rq_is_passthrough(rq)) {
+	if (at_head || blk_rq_is_passthrough(rq)) {
 		if (at_head)
 			list_add(&rq->queuelist, &bfqd->dispatch);
 		else
 			list_add_tail(&rq->queuelist, &bfqd->dispatch);
-	} else {
+	} else { /* bfqq is assumed to be non null here */
 		idle_timer_disabled = __bfq_insert_request(bfqd, rq);
 		/*
 		 * Update bfqq, because, if a queue merge has occurred
diff -uarN a/block/bfq-iosched.h b/block/bfq-iosched.h
--- a/block/bfq-iosched.h	2019-08-29 09:30:28.000000000 +0300
+++ b/block/bfq-iosched.h	2019-08-31 04:10:17.199908738 +0300
@@ -168,6 +168,9 @@
 	/* budget, used also to calculate F_i: F_i = S_i + @budget / @weight */
 	int budget;
 
+	/* device weight, if non-zero, it overrides the default weight of
+	 * bfq_group_data */
+	int dev_weight;
 	/* weight of the queue */
 	int weight;
 	/* next weight if a change is in progress */
diff -uarN a/block/bfq-iosched.h.rej b/block/bfq-iosched.h.rej
--- a/block/bfq-iosched.h.rej	1970-01-01 02:00:00.000000000 +0200
+++ b/block/bfq-iosched.h.rej	2019-08-31 04:10:17.149908739 +0300
@@ -0,0 +1,12 @@
+--- block/bfq-iosched.h
++++ block/bfq-iosched.h
+@@ -168,9 +168,6 @@ struct bfq_entity {
+ 	/* budget, used also to calculate F_i: F_i = S_i + @budget / @weight */
+ 	int budget;
+ 
+-	/* device weight, if non-zero, it overrides the default weight of
+-	 * bfq_group_data */
+-	int dev_weight;
+ 	/* weight of the queue */
+ 	int weight;
+ 	/* next weight if a change is in progress */
diff -uarN a/block/bfq-wf2q.c b/block/bfq-wf2q.c
--- a/block/bfq-wf2q.c	2019-08-29 09:30:28.000000000 +0300
+++ b/block/bfq-wf2q.c	2019-08-31 04:10:17.149908739 +0300
@@ -744,6 +744,8 @@
 		}
 #endif
 
+		/* Matches the smp_wmb() in bfq_group_set_weight. */
+		smp_rmb();
 		old_st->wsum -= entity->weight;
 
 		if (entity->new_weight != entity->orig_weight) {
diff -uarN a/block/bfq-wf2q.c.rej b/block/bfq-wf2q.c.rej
--- a/block/bfq-wf2q.c.rej	1970-01-01 02:00:00.000000000 +0200
+++ b/block/bfq-wf2q.c.rej	2019-08-31 04:10:17.149908739 +0300
@@ -0,0 +1,11 @@
+--- block/bfq-wf2q.c
++++ block/bfq-wf2q.c
+@@ -744,8 +744,6 @@ __bfq_entity_update_weight_prio(struct bfq_service_tree *old_st,
+ 		}
+ #endif
+ 
+-		/* Matches the smp_wmb() in bfq_group_set_weight. */
+-		smp_rmb();
+ 		old_st->wsum -= entity->weight;
+ 
+ 		if (entity->new_weight != entity->orig_weight) {
