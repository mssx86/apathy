From 2653981d3c9c85bb21df2c1805bcece90d6bea03 Mon Sep 17 00:00:00 2001
From: Paolo Valente <paolo.valente@linaro.org>
Date: Thu, 23 Jan 2020 10:48:16 +0100
Subject: [PATCH 09/19] block, bfq: extend incomplete name of field on_st

The flag on_st in the bfq_entity data structure is true if the entity
is on a service tree or is in service. Yet the name of the field,
confusingly, does not mention the second, very important case. Extend
the name to mention the second case too.

Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
---
 block/bfq-cgroup.c  | 11 ++++++-----
 block/bfq-iosched.c |  4 ++--
 block/bfq-iosched.h |  2 +-
 block/bfq-wf2q.c    | 19 ++++++++++---------
 4 files changed, 19 insertions(+), 17 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index b7f06e7da..a29cf5c0b 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -330,7 +330,7 @@ static void bfqg_put(struct bfq_group *bfqg)
 
 	BFQ_BUG_ON(bfqg->ref < 0);
 	if (bfqg->ref == 0) {
-		BFQ_BUG_ON(bfqg->entity.on_st);
+		BFQ_BUG_ON(bfqg->entity.on_st_or_in_serv);
 		kfree(bfqg);
 	}
 }
@@ -664,7 +664,8 @@ void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 	struct bfq_entity *entity = &bfqq->entity;
 
 	BFQ_BUG_ON(!bfq_bfqq_busy(bfqq) && !RB_EMPTY_ROOT(&bfqq->sort_list));
-	BFQ_BUG_ON(!RB_EMPTY_ROOT(&bfqq->sort_list) && !entity->on_st);
+	BFQ_BUG_ON(!RB_EMPTY_ROOT(&bfqq->sort_list) &&
+		   !entity->on_st_or_in_serv);
 	BFQ_BUG_ON(!bfq_bfqq_busy(bfqq) && bfqq == bfqd->in_service_queue);
 
 	/* If bfqq is empty, then bfq_bfqq_expire also invokes
@@ -677,7 +678,7 @@ void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 		bfq_bfqq_expire(bfqd, bfqd->in_service_queue,
 				false, BFQQE_PREEMPTED);
 
-	BFQ_BUG_ON(entity->on_st && !bfq_bfqq_busy(bfqq)
+	BFQ_BUG_ON(entity->on_st_or_in_serv && !bfq_bfqq_busy(bfqq)
 	    && &bfq_entity_service_tree(entity)->idle !=
 	       entity->tree);
 
@@ -689,7 +690,7 @@ void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 
 	if (bfq_bfqq_busy(bfqq))
 		bfq_deactivate_bfqq(bfqd, bfqq, false, false);
-	else if (entity->on_st) {
+	else if (entity->on_st_or_in_serv) {
 		BFQ_BUG_ON(&bfq_entity_service_tree(entity)->idle !=
 		       entity->tree);
 		bfq_put_idle_entity(bfq_entity_service_tree(entity), entity);
@@ -713,7 +714,7 @@ void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 
 	if (!bfqd->in_service_queue && !bfqd->rq_in_driver)
 		bfq_schedule_dispatch(bfqd);
-	BFQ_BUG_ON(entity->on_st && !bfq_bfqq_busy(bfqq)
+	BFQ_BUG_ON(entity->on_st_or_in_serv && !bfq_bfqq_busy(bfqq)
 	       && &bfq_entity_service_tree(entity)->idle !=
 	       entity->tree);
 	/* release extra ref taken above */
diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 3c81a4707..8aa92a9f4 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -1147,7 +1147,7 @@ static int bfqq_process_refs(struct bfq_queue *bfqq)
 	lockdep_assert_held(&bfqq->bfqd->lock);
 
 	io_refs = bfqq->allocated;
-	process_refs = bfqq->ref - io_refs - bfqq->entity.on_st -
+	process_refs = bfqq->ref - io_refs - bfqq->entity.on_st_or_in_serv -
 		(bfqq->weight_counter != NULL);
 	BFQ_BUG_ON(process_refs < 0);
 	return process_refs;
@@ -5424,7 +5424,7 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 	BFQ_BUG_ON(bfqq->allocated != 0);
 	BFQ_BUG_ON(bfqq->entity.tree);
 	BFQ_BUG_ON(bfq_bfqq_busy(bfqq));
-	BFQ_BUG_ON(bfqq->entity.on_st);
+	BFQ_BUG_ON(bfqq->entity.on_st_or_in_serv);
 	BFQ_BUG_ON(bfqq->weight_counter != NULL);
 
 	if (!hlist_unhashed(&bfqq->burst_list_node)) {
diff --git a/block/bfq-iosched.h b/block/bfq-iosched.h
index 098ea913c..965e7432d 100644
--- a/block/bfq-iosched.h
+++ b/block/bfq-iosched.h
@@ -150,7 +150,7 @@ struct bfq_entity {
 	 * Flag, true if the entity is on a tree (either the active or
 	 * the idle one of its service_tree) or is in service.
 	 */
-	bool on_st;
+	bool on_st_or_in_serv;
 
 	/* B-WF2Q+ start and finish timestamps [sectors/weight] */
 	u64 start, finish;
diff --git a/block/bfq-wf2q.c b/block/bfq-wf2q.c
index 2de48bee8..1076bb98e 100644
--- a/block/bfq-wf2q.c
+++ b/block/bfq-wf2q.c
@@ -735,9 +735,9 @@ static void bfq_forget_entity(struct bfq_service_tree *st,
 			      bool is_in_service)
 {
 	struct bfq_queue *bfqq = bfq_entity_to_bfqq(entity);
-	BFQ_BUG_ON(!entity->on_st);
+	BFQ_BUG_ON(!entity->on_st_or_in_serv);
 
-	entity->on_st = false;
+	entity->on_st_or_in_serv = false;
 	st->wsum -= entity->weight;
 	if (bfqq && !is_in_service) {
 		bfq_log_bfqq(bfqq->bfqd, bfqq, "(before): %p %d",
@@ -1177,10 +1177,10 @@ static void __bfq_activate_entity(struct bfq_entity *entity,
 		 */
 		bfq_get_entity(entity);
 
-		BFQ_BUG_ON(entity->on_st && bfqq);
+		BFQ_BUG_ON(entity->on_st_or_in_serv && bfqq);
 
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
-		if (entity->on_st && !bfqq) {
+		if (entity->on_st_or_in_serv && !bfqq) {
 			struct bfq_group *bfqg =
 				container_of(entity, struct bfq_group,
 					     entity);
@@ -1191,8 +1191,8 @@ static void __bfq_activate_entity(struct bfq_entity *entity,
 				     bfq_class_idx(entity), sd->in_service_entity);
 		}
 #endif
-		BFQ_BUG_ON(entity->on_st && !bfqq);
-		entity->on_st = true;
+		BFQ_BUG_ON(entity->on_st_or_in_serv && !bfqq);
+		entity->on_st_or_in_serv = true;
 	}
 
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
@@ -1377,7 +1377,8 @@ bool __bfq_deactivate_entity(struct bfq_entity *entity, bool ins_into_idle_tree)
 	struct bfq_service_tree *st;
 	bool is_in_service;
 
-	if (!entity->on_st) { /* entity never activated, or already inactive */
+	if (!entity->on_st_or_in_serv) {
+		/* entity never activated, or already inactive */
 		BFQ_BUG_ON(sd && entity == sd->in_service_entity);
 		return false;
 	}
@@ -1981,7 +1982,7 @@ bool __bfq_bfqd_reset_in_service(struct bfq_data *bfqd)
 	 * service tree either, then release the service reference to
 	 * the queue it represents (taken with bfq_get_entity).
 	 */
-	if (!in_serv_entity->on_st) {
+	if (!in_serv_entity->on_st_or_in_serv) {
 		/*
 		 * If no process is referencing in_serv_bfqq any
 		 * longer, then the service reference may be the only
@@ -2012,7 +2013,7 @@ void bfq_activate_bfqq(struct bfq_data *bfqd, struct bfq_queue *bfqq)
 
 	BFQ_BUG_ON(bfqq == bfqd->in_service_queue);
 	BFQ_BUG_ON(entity->tree != &st->active && entity->tree != &st->idle &&
-	       entity->on_st);
+	       entity->on_st_or_in_serv);
 
 	bfq_activate_requeue_entity(entity, bfq_bfqq_non_blocking_wait_rq(bfqq),
 				    false, false);
-- 
2.26.0.rc1.dirty

