#!/bin/env bash
# a1 >> check if variables are set
if	[ -z $1 ]; then printf "\n ! no kernel source tarball selected, exiting.\n\n";		exit 1
elif	[ -z $2 ]; then printf "\n ! (ck/zen) patchset option not specified, exiting.\n\n";	exit 1
elif	[ ! -f "${PWD}/${1}" ]; then printf "\n ! tarball doesn't exist, exiting.\n\n";		exit 1  
fi &&

# a2 >> check if $1 is a linux tarball
case $1 in
 *linux*)
  printf " * archive is a linux source tarball.\n\n" ;;
 *)
  printf " ! ${1} is not a linux source tarball, exiting.\n\n"
  exit 1 ;;
esac

# b >> script variables
kerdir="/mss/work/"$(echo $1 | sed 's/\.tar\.xz//')""
patchdir="/mss/repo/pkg-management/build-configs/sys-kernel/patches"
confdir="/mss/repo/pkg-management/build-configs/sys-kernel/configs"

ker_tarball="${1}"
pset="${2}"

# c >> functions
patch_die(){
 printf "\n ! patching failed, exiting with 1.\n\n"			&&
 exit 1
}

apply_deblob(){
 if [ $pset = "zen" ]
  then
   printf " * applying zen1 specific gnu deblob patches."		&&  
   if [ -f "${patchdir}/5.2.7-zen1-deblob-gnu.patch" ]
    then
     patch -p1 < "${patchdir}"/5.2.7-zen1-deblob-gnu.patch \
      &>> /tmp/kernel-build.log || patch_die
    else
     printf "\n ! gnu deblob not found in patchdir, exiting.\n"		&&
     exit 1
   fi
  else
   printf " * applying gnu deblob patches."				&&
   if [ -f "${patchdir}/5.2-deblob-gnu.patch" ]
    then
     patch -p1 < "${patchdir}"/5.2-deblob-gnu.patch \
      &>> /tmp/kernel-build.log || patch_die				&&
     printf " * removing gnu extraversion entry."			&&
     sed 's/EXTRAVERSION = -gnu/EXTRAVERSION =/' -i Makefile		&&
     printf "\t --> done.\n"
    else
     printf "\n ! gnu deblob not found in patchdir, exiting.\n"		&&
     exit 1
   fi
 fi
 printf "\t --> done.\n"
}

apply_freedo(){
 printf " * applying freedo logo."					&&
  if [ -d "${patchdir}/freedo-logo" ]
   then install -m644 -t "${kerdir}"/drivers/video/logo \
    "${patchdir}"/freedo-logo/logo_linux_{clut224.ppm,vga16.ppm,mono.pbm}
   else "\n ! freedo logo not found in patchdir, exiting.\n"; exit 1
  fi									&&
 printf "\t\t\t --> done.\n"
}

apply_ck(){
 printf " * applying ck patchset."					&&
  if [ -f "${patchdir}/ck-patches-5.2.patch" ]
   then patch -p1 < "${patchdir}"/ck-patches-5.2.patch \
    &>> /tmp/kernel-build.log || patch_die
   else "\n ! ck patchset not found in patchdir, exiting.\n"; exit 1
  fi									&&
 printf "\t\t\t --> done.\n"						&&

 printf " * removing ck extraversion entry."				&&
  sed 's/CKVERSION = -ck1/CKVERSION =/' -i Makefile			&&
 printf "\t\t --> done.\n"
}

apply_zen(){
 printf " * applying zen1 patchset."
  if [ -f "${patchdir}/linux-to-zen-5.2.7.patch" ]
   then patch -p1 < "${patchdir}"/linux-to-zen-5.2.7.patch \
    &>> /tmp/kernel-build.log || patch_die
   else "\n ! linux-to-zen patch not found in patchdir, exiting.\n"; exit 1
  fi
 printf "\t\t\t --> done.\n"
}

# d >> action
# d0 >> clear old log
printf " * cleaning old log."		&&
echo > "/tmp/kernel-build.log"		&&
printf "\t\t\t\t --> done.\n"		&&

# d1.1 >> unpack kernel.
printf " * unpacking kernel source."	&&
 tar xf "${ker_tarball}"		&&
printf "\t\t\t --> done.\n"		&&
 cd "${kerdir}"				&&

# d1.2 >> run mrproper
printf " * running mrproper."		&&
make mrproper &>> /tmp/kernel-build.log	&&
printf "\t\t\t\t --> done.\n"		&&

# d2 >> apply patches
case $pset in
 ck)
  apply_deblob							&&
  apply_freedo							&&
  printf " * copying config.\n"					&&
  cp "${confdir}"/5.2-ck1-libre-gcc.config "${kerdir}/.config"	&&
  apply_ck
 ;;
 zen)
  printf " * copying config.\n"					&&
  cp "${confdir}"/5.2-zen1-libre-gcc.config "${kerdir}/.config"	&&
  apply_zen							&&
  apply_deblob							&&
  apply_freedo

  printf " * removing gnu and zen1 extraversion entry."		&&
  sed 's/EXTRAVERSION = -zen1-gnu/EXTRAVERSION =/' -i Makefile	&&
  printf "\t --> done.\n"
 ;;
 *)
  printf " * not applying a patchset."
 ;;
esac

# d3 >> run nconfig
printf "\n * run nconfig for manual config? (y/n): "	&&
read answermenuconf

if [ "$answermenuconf" != "${answermenuconf#[Yy]}" ]
then
 printf " * running nconfig.\n"			&&
  if [ "${ccomp}" = "clang" ]
   then make CC=clang HOSTCC=clang nconfig
   else make nconfig
  fi							&&
 printf "\n * done.\n\n"
else
 printf " * not running nconfig.\n\n"
fi							&&

# d4 >> run make
printf " * running make.\n"				&&
printf " * do tail -f /tmp/kernel-build.log to view."	&&
make -j$(($(nproc)+1)) &> /tmp/kernel-build.log		&&
doas -- make modules_install 				&&
printf "\t\t\t --> done.\n"				&&

# d5 >> run kinst
printf " * run kinst to install the kernel? (y/n): "	&&
read answerkinst

if [ "$answerkinst" != "${answerkinst#[Yy]}" ]
 then doas -- /mss/bin/kinst
 else printf " * not installing the built kernel."
fi							&&

printf "\n :) kernel build is complete.\n"		&&
exit 0
