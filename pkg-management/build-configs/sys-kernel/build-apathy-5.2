#!/mss/bin/sh
# a1 >> check if variables are set
if	[ -z $1 ]; then printf "\n ! no kernel source tarball selected, exiting.\n\n";		exit 1
elif	[ ! -f "${PWD}/${1}" ]; then printf "\n ! tarball doesn't exist, exiting.\n\n";		exit 1  
fi &&

# a2 >> check if $1 is a linux tarball
case $1 in
 *linux*)
  printf " * archive is a linux source tarball.\n\n" ;;
 *)
  printf " ! ${1} is not a linux source tarball, exiting.\n\n"
  exit 1 ;;
esac

# b >> script variables
saucedir="/mnt/mss/ram/work"
workdir="/mnt/mss/ram/work/"$(echo $1 | sed 's/\.tar\.xz//')""
patchdir="/mss/repo/pkg-management/build-configs/sys-kernel/patches"
confdir="/mss/repo/pkg-management/build-configs/sys-kernel/configs"

# c >> functions
patch_die(){
 printf "\n\n ! patching failed, exiting with 1.\n\n"
 exit 1
}

apply_deblob(){
 printf " * applying: gnu deblob patches."
  patch -p1 < "${patchdir}"/5.2-deblob-gnu.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t\t\t\t --> done.\n"

 printf " * removing: gnu extraversion entry."
  sed 's/EXTRAVERSION = -gnu/EXTRAVERSION =/' -i Makefile			&&
 printf "\t\t\t\t --> done.\n"
}

apply_freedo(){
 printf " * applying: freedo logo."
  install -m644 -t "${workdir}"/drivers/video/logo \
  "${patchdir}"/freedo-logo/logo_linux_clut224.ppm				&&
  install -m644 -t "${workdir}"/drivers/video/logo \
  "${patchdir}"/freedo-logo/logo_linux_vga16.ppm				&&
  install -m644 -t "${workdir}"/drivers/video/logo \
  "${patchdir}"/freedo-logo/logo_linux_mono.pbm					&&
  printf "\t\t\t\t\t --> done.\n"
}

apply_apathy(){
 printf " * applying: graysky2 cpu family specific optimiziation patch."
  patch -p1 < "${patchdir}"/apathy/5.2-graysky2-gcc-9.1-cpu-opt.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t --> done.\n"

 printf " * applying: zen -03 optimize harder patch."
  patch -p1 < "${patchdir}"/apathy/5.2-cc_optimize_harder.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t\t\t --> done.\n"

 printf " * applying: zen-muqss patches."
  patch -p1 < "${patchdir}"/apathy/5.2-zen-muqss.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t\t\t\t\t --> done.\n"

 printf " * applying: zen-tune patches."
  patch -p1 < "${patchdir}"/apathy/5.2-zen-tune.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t\t\t\t\t --> done.\n"

 printf " * applying: algodev bfq-mq patches."
  patch -p1 < "${patchdir}"/apathy/5.2-aldgodev-bfq-mq.patch \
  >>/tmp/kernel-build.log 2>&1 || patch_die					&&
 printf "\t\t\t\t --> done.\n"
}

# d >> action
# d0 >> clear old log
printf " * cleaning old log."
echo > "/tmp/kernel-build.log"				&&
printf "\t\t\t --> done.\n"

# d1 >> unpack kernel.
if [ ! -d "${saucedir}" ]
 then
  printf " * saucedir does not exist, creating."
  mkdir "${saucedir}"					&&
  printf "\t --> done.\n"
 else
  printf "\n * saucedir: ${saucedir}\n"
  printf " * workdir : ${workdir}\n\n"
fi

printf " * unpacking kernel source."
 tar xf "${1}" --directory="${saucedir}"		&&
printf "\t\t --> done.\n"
 cd "${workdir}"					&&

# d1.1 >> run mrproper
printf " * running mrproper."
 make mrproper >>/tmp/kernel-build.log 2>&1		&&
printf "\t\t\t --> done.\n"

# d2 >> copy config
printf "\n * building with gcc.\n"
printf " * copying kernel config."
 cp "${confdir}/5.2-apathy-libre-gcc-no-ucode.config" \
 "${workdir}"/.config					&&
printf "\t\t --> done.\n\n"				&&

# d3 >> apply patches
apply_deblob						&&
apply_freedo						&&
apply_apathy						&&

# d5 >> run nconfig
printf "\n * run nconfig for manual config? (y/n): "
read answermenuconf

if [ "$answermenuconf" != "${answermenuconf#[Yy]}" ]
then
 printf " * running nconfig.\n"
  make nconfig						&&
 printf "\n * done.\n\n"
else
 printf " * not running nconfig.\n\n"
fi							&&

# d6 >> run make
printf " * running make.\n"
printf " * do tail -f /tmp/kernel-build.log to view.\n"
 make -j$(($(nproc)+1)) >>/tmp/kernel-build.log 2>&1	&&
 doas -- make modules_install				&&
printf " * installing the built kernel.\n"

# d7 >> run kinst
printf " * run kinst to install the kernel? (y/n): "	&&
read answerkinst

if [ "$answerkinst" != "${answerkinst#[Yy]}" ]
 then doas -- /mss/bin/kinst
 else printf " * not installing the built kernel."
fi							&&

printf "\n :) kernel build is complete.\n"		&&

# d8 >> clean up ram.
printf " * run kinst to install the kernel? (y/n): "	&&
read answerclean

if [ "$answerclean" != "${answerclean#[Yy]}" ]
 then
  printf " * cleaning up the workdir."
   rm -rf ${workdir}					&&
  printf "\t\t --> done.\n\n"
 else
  printf " * not cleaning up the workdir.\n\n"
fi							&&

exit 0
